void spy(string direction, int distance)
{
bool found_object = false;
bool on_lift=false;
bool in_passage=false;
bool in_pspassage=false;
passage@ current_passage = null;
pspassage@ current_pspassage = null;
vector spyage(me.x,me.y);
string materials;
string current_tile=gmt(me.x,me.y);
   for(uint i = 0; i < lifts.length(); i++)
    {
        if(me.x >= lifts[i].minx && me.x <= lifts[i].maxx && me.y == lifts[i].lifty)
        {
            on_lift = true;
            break;
        }
    }
    for (uint i = 0; i < passages.length(); i++)
    {
        if(passages[i].is_within_passage(me.x, me.y))
        {
            in_passage = true;
            @current_passage = passages[i];
            break;
        }
    }
    for (uint i = 0; i < pspassages.length(); i++)
    {
        if(pspassages[i].is_within_pspassage(me.x, me.y))
        {
            in_pspassage = true;
            @current_pspassage = pspassages[i];
            break;
        }
    }
for (uint i = 1; i <= distance && !found_object; i++)
{
if(direction=="left")
spyage.x--;
else if(direction=="right")
spyage.x++;
else if(direction=="down")
spyage.y--;
else if(direction=="up")
spyage.y++;
        if(on_lift && (direction == "left" || direction == "right"))
        {
            string current_tile = gmt(spyage.x, spyage.y);
            if(current_tile == "" || current_tile == "air")
            {
                materials += "air: " + i + " feet. ";
                found_object = true;
            }
        }
        if (in_passage)
        {
            string endpoint_desc = current_passage.get_endpoint_description(spyage.x, spyage.y);
            if (endpoint_desc != "")
            {
                materials += endpoint_desc + ": " + i + " feet. ";
                found_object = true;
            }
            else if (!current_passage.is_within_passage(spyage.x, spyage.y))
            {
                in_passage = false;
            }
        }
        if (!in_passage)
        {
            for (uint j1 = 0; j1 < passages.length(); j1++)
            {
                string endpoint_desc = passages[j1].get_endpoint_description(spyage.x, spyage.y);
                if (endpoint_desc != "")
                {
                    materials += endpoint_desc + ": " + i + " feet. ";
                }
            else if (passages[j1].is_within_passage(spyage.x, spyage.y))
            {
                in_passage = true;
                @current_passage = passages[j1];
                string passage_dimensions;
                if (current_passage.direction == 1)
                {
                    passage_dimensions = current_passage.passagelength + " x 1";
                }
                else if (current_passage.direction == 2)
                {
                    passage_dimensions = "1 x " + current_passage.passagelength;
                }
                materials += passage_dimensions + " tile " + " passage: " + i + " feet. ";
            }
        }
            if (found_object) break;
        }
        if (in_pspassage)
        {
            string endpoint_desc = current_pspassage.get_endpoint_description(spyage.x, spyage.y);
            if (endpoint_desc != "")
            {
                materials += endpoint_desc + ": " + i + " feet. ";
                found_object = true;
            }
            else if (!current_pspassage.is_within_pspassage(spyage.x, spyage.y))
            {
                in_pspassage = false;
            }
        }
        if (!in_pspassage)
        {
            for (uint j2 = 0; j2 < pspassages.length(); j2++)
            {
                string endpoint_desc = pspassages[j2].get_endpoint_description(spyage.x, spyage.y);
                if (endpoint_desc != "")
                {
                    materials += endpoint_desc + ": " + i + " feet. ";
                }
            else if (pspassages[j2].is_within_pspassage(spyage.x, spyage.y))
            {
                in_pspassage = true;
                @current_pspassage = pspassages[j2];
                string pspassage_dimensions;
                if (current_pspassage.direction == 1)
                {
                    pspassage_dimensions = current_pspassage.pspassagelength + " x 1";
                }
                else if (current_pspassage.direction == 2)
                {
                    pspassage_dimensions = "1 x " + current_pspassage.pspassagelength;
                }
                materials += pspassage_dimensions + " tile " + " passage: " + i + " feet. ";
            }
        }
            if (found_object) break;
        }
                if (!found_object)
        {
for (uint i1 = 0; i1 < blockages.length(); i1++)
{
if(spyage.x>=blockages[i1].minx && spyage.x<=blockages[i1].maxx && spyage.y>=blockages[i1].miny && spyage.y<=blockages[i1].maxy)
{
materials+="blockage: "+i+" feet. ";
found_object=true;
}
}
for (uint i2 = 0; i2 < checkpoints.length(); i2++)
{
if(spyage.x==checkpoints[i2].checkx && spyage.y==checkpoints[i2].checky)
{
materials+="checkpoint: "+i+" feet. ";
}
}
for(uint i3=0; i3<belts.length(); i3++)
{
if(spyage.x>=belts[i3].minx && spyage.x<=belts[i3].maxx && spyage.y>=belts[i3].miny && spyage.y<=belts[i3].maxy)
{
materials+="conveyor belt: "+i+" feet. ";
found_object=true;
}
}
for (uint i4 = 0; i4 < doors.length(); i4++)
{
if(spyage.x==doors[i4].startx && spyage.y==doors[i4].starty)
{
materials+="door: "+i+" feet. ";
}
}
for (uint i5 = 0; i5 < hazards.length(); i5++)
{
if(spyage.x>=hazards[i5].minx && spyage.x<=hazards[i5].maxx && spyage.y>=hazards[i5].miny && spyage.y<=hazards[i5].maxy)
{
materials+=(hazards[i5].maxx-hazards[i5].minx+1)+" x "+(hazards[i5].maxy-hazards[i5].miny+1)+" tile "+hazards[i5].hazardtype+" hazard: "+i+" feet. ";
found_object=true;
}
}
for (uint i6 = 0; i6 < signs.length(); i6++)
{
if(spyage.x==signs[i6].signx && spyage.y==signs[i6].signy)
{
materials+="sign: "+i+" feet. ";
}
}
for (uint i7 = 0; i7 < spikes.length(); i7++)
{
if(spyage.x>=spikes[i7].minx && spyage.x<=spikes[i7].maxx && spyage.y>=spikes[i7].miny && spyage.y<=spikes[i7].maxy)
{
materials+=(spikes[i7].maxx-spikes[i7].minx+1)+" x "+(spikes[i7].maxy-spikes[i7].miny+1)+" tile "+spikes[i7].spiketype+": "+i+" feet. ";
found_object=true;
}
}
for (uint i8 = 0; i8 < travelpoints.length(); i8++)
{
if(spyage.x>=travelpoints[i8].minx && spyage.x<=travelpoints[i8].maxx && spyage.y>=travelpoints[i8].miny && spyage.y<=travelpoints[i8].maxy)
{
materials+=(travelpoints[i8].maxx-travelpoints[i8].minx+1)+" x "+(travelpoints[i8].maxy-travelpoints[i8].miny+1)+" tile travelpoint: "+i+" feet.";
found_object=true;
}
}
for (uint i9 = 0; i9 < clocks.length(); i9++)
{
if(spyage.x==clocks[i9].clockx && spyage.y==clocks[i9].clocky)
{
materials+="clock: "+i+" feet. ";
}
}
for (uint i10 = 0; i10 < calanders.length(); i10++)
{
if(spyage.x==calanders[i10].calanderx && spyage.y==calanders[i10].calandery)
{
materials+="calander: "+i+" feet. ";
}
}
for (uint i11 = 0; i11 < animals.length(); i11++)
{
if(spyage.x==animals[i11].amx && spyage.y==animals[i11].amy)
{
materials+=animals[i11].animalcard+" x "+animals[i11].animaltype+": "+i+" feet. ";
}
}
for (uint i12 = 0; i12 < humans.length(); i12++)
{
if(spyage.x==humans[i12].humx && spyage.y==humans[i12].humy)
{
materials+=humans[i12].humancard+" x "+humans[i12].humantype+": "+i+" feet. ";
}
}
for (uint i13 = 0; i13 < projectiles.length(); i13++)
{
if(spyage.x==projectiles[i13].prox && spyage.y==projectiles[i13].proy)
{
materials+=projectiles[i13].projcard+" x "+projectiles[i13].projtype+": "+i+" feet. ";
}
}
for (uint i14 = 0; i14 < robots.length(); i14++)
{
if(spyage.x==robots[i14].robx && spyage.y==robots[i14].roby)
{
materials+=robots[i14].robotcard+" x "+robots[i14].robottype+": "+i+" feet. ";
}
}
for (uint i15 = 0; i15 < turrets.length(); i15++)
{
if(spyage.x==turrets[i15].turx && spyage.y==turrets[i15].tury)
{
materials+=turrets[i15].turcard+" x "+turrets[i15].turtype+": "+i+" feet. ";
}
}
for (uint i16 = 0; i16 < zombies.length(); i16++)
{
if(spyage.x==zombies[i16].zombx && spyage.y==zombies[i16].zomby)
{
materials+=zombies[i16].zombiecard+" x "+zombies[i16].zombietype+": "+i+" feet. ";
}
}
for (uint i17 = 0; i17 < psdoors.length(); i17++)
{
if(spyage.x==psdoors[i17].startx && spyage.y==psdoors[i17].starty)
{
materials+="locked door: "+i+" feet. ";
}
}
for(uint i18=0; i18<dest_walls.length(); i18++)
{
if(spyage.x>=dest_walls[i18].minx && spyage.x<=dest_walls[i18].maxx && spyage.y>=dest_walls[i18].miny && spyage.y<=dest_walls[i18].maxy)
{
materials+=("destroyable "+dest_walls[i18].dest_wall+": "+i+" feet. ");
found_object=true;
}
}
for (uint i19 = 0; i19 < teleporters.length(); i19++)
{
if(spyage.x==teleporters[i19].telx && spyage.y==teleporters[i19].tely)
{
materials+="teleporter: "+i+" feet. ";
}
}
for (uint i20 = 0; i20 < bosses.length(); i20++)
{
if(spyage.x==bosses[i20].bossx && spyage.y==bosses[i20].bossy)
{
materials+=bosses[i20].bosscard+" x "+bosses[i20].bosstype+": "+i+" feet. ";
}
}
for (uint i21 = 0; i21 < helpers.length(); i21++)
{
if(spyage.x==helpers[i21].helpx && spyage.y==helpers[i21].helpy)
{
materials+=helpers[i21].helpercard+" x "+helpers[i21].helpertype+": "+i+" feet. ";
}
}
for (uint i22 = 0; i22 < objs.length(); i22++)
{
if(spyage.x==objs[i22].itx && spyage.y==objs[i22].ity)
{
materials+=objs[i22].objtype2+": "+i+" feet. ";
}
}
for (uint i23 = 0; i23 < vehicles.length(); i23++)
{
if(spyage.x==vehicles[i23].vehx && spyage.y==vehicles[i23].vehy)
{
materials+=vehicles[i23].vehtype+": "+i+" feet. ";
}
}
for (uint i24 = 0; i24 < safezones.length(); i24++)
{
if(spyage.x>=safezones[i24].minx && spyage.x<=safezones[i24].maxx && spyage.y>=safezones[i24].miny && spyage.y<=safezones[i24].maxy)
{
materials+=(safezones[i24].maxx-safezones[i24].minx+1)+" x "+(safezones[i24].maxy-safezones[i24].miny+1)+" tile safe zone: "+i+" feet.";
found_object=true;
}
}
for (uint i25 = 0; i25 < forcefields.length(); i25++)
{
if(spyage.x>=forcefields[i25].minx && spyage.x<=forcefields[i25].maxx && spyage.y>=forcefields[i25].miny && spyage.y<=forcefields[i25].maxy)
{
if(forcefields[i25].forcefielded==true) materials+=(forcefields[i25].maxx-forcefields[i25].minx+1)+" x "+(forcefields[i25].maxy-forcefields[i25].miny+1)+" tile active "+forcefields[i25].forcetype+" force field: "+i+" feet. ";
if(forcefields[i25].forcefielded==false) materials+=(forcefields[i25].maxx-forcefields[i25].minx+1)+" x "+(forcefields[i25].maxy-forcefields[i25].miny+1)+" tile inactive "+forcefields[i25].forcetype+" force field: "+i+" feet. ";
found_object=true;
}
}
for (uint i26 = 0; i26 < mines.length(); i26++)
{
if(spyage.x==mines[i26].minex && spyage.y==mines[i26].miney)
{
if(mines[i26].triggered==true) materials+="active mine: "+i+" feet. ";
if(mines[i26].triggered==false) materials+="inactive mine: "+i+" feet. ";
}
}
for(uint i27=0; i27<lifts.length(); i27++)
{
if(spyage.x>=lifts[i27].minx && spyage.x<=lifts[i27].maxx && spyage.y==lifts[i27].lifty)
{
if(!on_lift || (direction == "up" || direction == "down"))
{
materials += (lifts[i27].maxx - lifts[i27].minx + 1) + " x " + " tile lift: " + i + " feet. ";
found_object = true;
}
}
}
}
if(current_tile!=gmt(spyage.x,spyage.y))
{
current_tile=gmt(spyage.x,spyage.y);
if(current_tile=="" || current_tile=="air")
materials+="air: "+i+" feet. ";
else
materials+=current_tile+": "+i+" feet. ";
}
}
if(materials=="")
materials="Nothing in this direction";
speak(materials);
}
