class dynamic_menu_item {
string option;
bool is_filename;
bool activate;
string name;
string letter;
dynamic_menu_item() {
option = "";
is_filename = true;
name = "";
activate = false;
}
}

class dynamic_menu_pro {
bool letters_autospeak = true;
bool letters_autoactivate;
bool speak_letter;
bool enable_first_letter_navigation;
bool enable_multi_letter_navigation;
bool click_at_edge;
bool repeat_items_at_edges;
bool music_added = false;
int up_and_down_skip_amount=1;
int voltime = 50;
timer multinav_timer;
timer voltimer;
sound music;
int volkeyup = KEY_PRIOR;
int volkeydown = KEY_NEXT;
string open_sound;
string click_sound;
string edge_sound;
string wrap_sound;
string enter_sound;
bool enable_numbers;
bool enable_space;
bool enable_enter;
bool speak_position_information;
bool enable_side_scrolling;
bool enable_side_scrolling2;
bool wrap;
bool allow_escape;
bool force_sapi;
bool enable_home_and_end;
bool enable_up_and_down;
bool enable_left_and_right;
void set_up_and_down_skip_amount(int amount)
{
up_and_down_skip_amount=amount;
}
void set_volume_keys(int key1, int key2, int key3)
{
volkeyup = key1;
volkeydown = key2;
}
void fade_music(int value1=20)
{
fade(music, -50, value1);
music.stop();
}
void stop_music()
{
music.stop();
}
void play_music()
{
music.set_volume(menumusvolume);
if (music.playing == false)
music.play_looped();
}
void add_music(string musicpath) {
if (music.playing == false) {
if(!music.load(fn(musicpath)))
music.set_volume(menumusvolume);
music_added = true;
}
}
void play_click_sound() {
if (click_sound != "" or !file_exists(click_sound)) {
if (enable_side_scrolling == true)
spool.play_stationary_extended(click_sound, false, 0, convert_to_pan(get_item_count(), menu_position, -25, 25), 0, 100, false);
else if (enable_side_scrolling2==true)
spool.play_stationary_extended(click_sound, false, 0, (menu_position*100/get_item_count())-25, 25, (menu_position+20), false);
else
spool.play_stationary(click_sound, false, false);
}
}
void play_edge_sound() {
if (edge_sound != "" or !file_exists(edge_sound)) {
if (enable_side_scrolling == true)
spool.play_stationary_extended(edge_sound, false, 0, convert_to_pan(get_item_count(), menu_position, -25, 25), 0, 100, false);
else if (enable_side_scrolling2==true)
spool.play_stationary_extended(edge_sound, false, 0, (menu_position*100/get_item_count())-25, 25, (menu_position+20), false);
else
spool.play_stationary(edge_sound, false, false);
}
}
void play_enter_sound() {
if (enter_sound != "" or !file_exists(enter_sound)) {
if (enable_side_scrolling == true)
spool.play_stationary_extended(enter_sound, false, 0, convert_to_pan(get_item_count(), menu_position, -25, 25), 0, 100, false);
else if (enable_side_scrolling2==true)
spool.play_stationary_extended(enter_sound, false, 0, (menu_position*100/get_item_count())-25, 25, (menu_position+20), false);
else
spool.play_stationary(enter_sound, false, false);
}
}
dynamic_menu_pro() {
running = false;
reset(true);
}

int add_item(string filename, string name = "", string key = "", bool act = true) {
return add_item_extended(filename, true, name, key, act);
}

int add_item_tts(string text, string name = "", string key = "", bool act = true) {
return add_item_extended(text, false, name, key, act);
}

bool set_speech_mode(int speech_output) {
if((speech_output < 0) || (speech_output > 4))
return false;
this.speech_output = speech_output;
return true;
}

int get_item_count() {
return item_list.length();
}

int get_position() {
if(running == false)
return -1;
return menu_position;
}

bool is_running() {
return running;
}

bool set_tts_object(tts_voice@ handle) {
if(running == true)
return false;
@tts_handle = @handle;
return true;
}

bool set_sound_object(sound@ handle) {
if(running == true)
return false;
@sound_handle = @handle;
return true;
}

bool set_callback(menu_callback@ callback, string user_data) {
if(running == true)
return false;
@callback_handle = @callback;
callback_data = user_data;
return true;
}

string get_item_name(int item) {
if(item<1 or item>item_list.length())
return "";
return item_list[item - 1].name;
}

int run(string intro, bool is_intro_tts) {
return run_extended(intro, is_intro_tts, 0, false);
}

int run_extended(string intro, bool is_intro_tts, int start_position, bool auto_speak_first) {
if(running == true)
return -1;
int item_count = item_list.length();
if(item_count == 0)
return -1;
if(start_position > item_count)
return -1;
menu_position = start_position;
bool speak_item = false;
if(start_position < 1 && auto_speak_first == true)
return -1;
bool initial = auto_speak_first;
sound@ internal_sound;
tts_voice@ internal_tts;
if(@sound_handle == null) {
sound temp_sound;
@internal_sound = temp_sound;
} else
@internal_sound = sound_handle;
bool has_tts_items = is_intro_tts;
if(has_tts_items == false) {
for(int i = 0; i < item_count; i++) {
if(item_list[i].is_filename == false) {
has_tts_items = true;
break;
}
}
}
/*if(speech_output==0 and has_tts_items==true)
{
if(@tts_handle==null)
{
tts_voice temp_voice;
@internal_tts=temp_voice;
}
else
{
@internal_tts=tts_handle;
}
}*/
if(intro != "") {
if(is_intro_tts == true) {
if(speech_output > 0 and speech_output < 5) {
if(screen_reader_speak_interrupt(speech_output, intro) == false)
return -1;
} else if (force_sapi == false) {
tts.stop();
speak(intro);
} else {
if(internal_tts.speak_interrupt(intro) == false)
return -1;
}
} else {
if(internal_sound.load(fn(intro), @spool.pack_file) == false)
return -1;
internal_sound.play();
}
}
music.set_volume(menumusvolume);
spool.play_stationary(open_sound, false);
music.play_looped();
running = true;
if (enable_first_letter_navigation == true or enable_multi_letter_navigation == true)
get_characters();
string char;
string multichar;
string test;
while(true) {
if (enable_first_letter_navigation == false and enable_multi_letter_navigation == true) {
if(multinav_timer.elapsed > 1000 and multichar != "")
multichar = "";
string c = get_characters();
if(c != "" and !string_is_digits(c) and multichar != c) {
multinav_timer.restart();
multichar += string_to_lower_case(c);
}
if(multichar != "" and c != "") {
bool found = false;
for (uint i = menu_position; i < item_list.length(); i++) {
test = string_to_lower_case(translate(item_list[i].option));
if (string_left(test, multichar.length()) == multichar) {
if(menu_position > 0) {
if(string_left(test, multichar.length()) == string_left(string_to_lower_case(item_list[menu_position - 1].option), multichar.length()) and multichar.length() > 1) {
found = true;
break;
}
}
if (menu_position - 1 < i)
menu_position = i + 1;
else if (menu_position - 1 > i)
menu_position = i + 1;
play_click_sound();
if (letters_autospeak == true)
speak_item = true;
if (letters_autoactivate == true) {
play_enter_sound();
running = false;
return menu_position;
}
found = true;
break;
} else
continue;
}
if (found == false) {
for (uint i = 0; i < menu_position; i++) {
test = string_to_lower_case(translate(item_list[i].option));
if (string_left(test, multichar.length()) == multichar) {
if(menu_position > 0) {
if(string_left(test, multichar.length()) == string_left(string_to_lower_case(item_list[menu_position - 1].option), multichar.length()) and multichar.length() > 1) {
found = true;
break;
}
}
if (menu_position - 1 < i)
menu_position = i + 1;
else if (menu_position - 1 > i)
menu_position = i + 1;
play_click_sound();
if (letters_autospeak == true)
speak_item = true;
if (letters_autoactivate == true) {
play_enter_sound();
running = false;
return menu_position;
}
break;
} else
continue;
}
}
}
}
if (enable_first_letter_navigation == true and enable_multi_letter_navigation == false) {
char = get_characters();
if(char != "" and !string_is_digits(char)) {
bool found = false;
for (uint i = menu_position; i < item_list.length(); i++) {
test = item_list[i].letter;
if (test == char) {
if (menu_position - 1 < i)
menu_position = i + 1;
else if (menu_position - 1 > i and test == char)
menu_position = i + 1;
play_click_sound();
if (letters_autospeak == true)
speak_item = true;
if (letters_autoactivate == true) {
play_enter_sound();
running = false;
return menu_position;
}
found = true;
break;
} else
continue;
}
if (found == false) {
for (uint i = 0; i < menu_position; i++) {
test = item_list[i].letter;
if (test == char) {
if (menu_position - 1 < i)
menu_position = i + 1;
else if (menu_position - 1 > i and test == char)
menu_position = i + 1;
play_click_sound();
if (letters_autospeak == true)
speak_item = true;
if (letters_autoactivate == true) {
play_enter_sound();
running = false;
return menu_position;
}
break;
} else
continue;
}
}
}
}
if(@callback_handle != null) {
int callback_result = callback_handle(this, callback_data);
if(callback_result != 0) {
running = false;
return callback_result;
}
}
if(speak_item == true) {
string secondary;
if (speak_letter == true)
secondary = " " + item_list[menu_position - 1].letter;
if(item_list[menu_position - 1].is_filename == true) {
if(@internal_tts != null)
internal_tts.stop();
if(internal_sound.load(fn(item_list[menu_position - 1].option), @spool.pack_file) == false) {
running = false;
return -1;
}
internal_sound.play();
} else {
if(internal_sound.active == true)
internal_sound.close();
if(speech_output > 0 and speech_output < 5) {
if (speak_position_information == true) {
if(screen_reader_speak_interrupt(speech_output, item_list[menu_position - 1].option + secondary + ". " + menu_position + " of " + get_item_count()) == false) {
running = false;
return -1;
}
} else {
if(screen_reader_speak_interrupt(speech_output, item_list[menu_position - 1].option + secondary + ". " + menu_position + " of " + get_item_count()) == false) {
running = false;
return -1;
}
}
} else if (force_sapi == false) {
if (speak_position_information == true)
speak(item_list[menu_position - 1].option + secondary + ". " + menu_position + " of " + get_item_count());
else
speak(item_list[menu_position - 1].option + secondary);
} else {
if (speak_position_information == true) {
if(internal_tts.speak_interrupt(item_list[menu_position - 1].option + secondary + ". " + menu_position + " of " + get_item_count()) == false) {
running = false;
return -1;
}
} else {
if(internal_tts.speak_interrupt(item_list[menu_position - 1].option + secondary) == false) {
running = false;
return -1;
}
}
}
}
speak_item = false;
}
if(initial == true) {
bool finished_intro = false;
if(is_intro_tts == false) {
if(internal_sound.playing == false)
finished_intro = true;
} else {
if(speech_output > 0 and speech_output < 5)
finished_intro = true;
else {
if(internal_tts.speaking == false)
finished_intro = true;
}
}

if(finished_intro == true) {
initial = false;
if(item_list[menu_position - 1].is_filename == true) {
speak_item = true;
continue;
} else {
if(speech_output > 0 and speech_output < 5) {
if(screen_reader_speak(speech_output, item_list[menu_position - 1].option) == false) {
running = false;
return -1;
}
} else {
speak_item = true;
continue;
}
}
}
}
if (enable_numbers == true) {
if (key_up(KEY_RSHIFT) and key_repeating(KEY_1) and get_item_count() >= 1) {
menu_position = 1;
play_click_sound();
speak_item = true;
continue;
} else if (key_up(KEY_RSHIFT) and key_repeating(KEY_2) and get_item_count() >= 2) {
menu_position = 2;
play_click_sound();
speak_item = true;
continue;
} else if (key_up(KEY_RSHIFT) and key_repeating(KEY_3) and get_item_count() >= 3) {
menu_position = 3;
play_click_sound();
speak_item = true;
continue;
} else if (key_up(KEY_RSHIFT) and key_repeating(KEY_4) and get_item_count() >= 4) {
menu_position = 4;
play_click_sound();
speak_item = true;
continue;
} else if (key_up(KEY_RSHIFT) and key_repeating(KEY_5) and get_item_count() >= 5) {
menu_position = 5;
play_click_sound();
speak_item = true;
continue;
} else if (key_up(KEY_RSHIFT) and key_repeating(KEY_6) and get_item_count() >= 6) {
menu_position = 6;
play_click_sound();
speak_item = true;
continue;
} else if (key_up(KEY_RSHIFT) and key_repeating(KEY_7) and get_item_count() >= 7) {
menu_position = 7;
play_click_sound();
speak_item = true;
continue;
} else if (key_up(KEY_RSHIFT) and key_repeating(KEY_8) and get_item_count() >= 8) {
menu_position = 8;
play_click_sound();
speak_item = true;
continue;
} else if (key_up(KEY_RSHIFT) and key_repeating(KEY_9) and get_item_count() >= 9) {
menu_position = 9;
play_click_sound();
speak_item = true;
continue;
} else if (key_up(KEY_RSHIFT) and key_repeating(KEY_0) and get_item_count() >= 10) {
menu_position = 10;
play_click_sound();
speak_item = true;
continue;
} else if (key_up(KEY_RSHIFT) and key_repeating(KEY_MINUS) and get_item_count() >= 11) {
menu_position = 11;
play_click_sound();
speak_item = true;
continue;
} else if (key_up(KEY_RSHIFT) and key_repeating(KEY_EQUALS) and get_item_count() >= 12) {
menu_position = 12;
play_click_sound();
speak_item = true;
continue;
} else if (key_up(KEY_RSHIFT) and key_repeating(KEY_BACK) and get_item_count() >= 13) {
menu_position = 13;
play_click_sound();
speak_item = true;
continue;
} else if (key_down(KEY_RSHIFT) and key_repeating(KEY_1) and get_item_count() >= 14) {
menu_position = 14;
play_click_sound();
speak_item = true;
continue;
} else if (key_down(KEY_RSHIFT) and key_repeating(KEY_2) and get_item_count() >= 15) {
menu_position = 15;
play_click_sound();
speak_item = true;
continue;
} else if (key_down(KEY_RSHIFT) and key_repeating(KEY_3) and get_item_count() >= 16) {
menu_position = 16;
play_click_sound();
speak_item = true;
continue;
} else if (key_down(KEY_RSHIFT) and key_repeating(KEY_4) and get_item_count() >= 17) {
menu_position = 17;
play_click_sound();
speak_item = true;
continue;
} else if (key_down(KEY_RSHIFT) and key_repeating(KEY_5) and get_item_count() >= 18) {
menu_position = 18;
play_click_sound();
speak_item = true;
continue;
} else if (key_down(KEY_RSHIFT) and key_repeating(KEY_6) and get_item_count() >= 19) {
menu_position = 19;
play_click_sound();
speak_item = true;
continue;
} else if (key_down(KEY_RSHIFT) and key_repeating(KEY_7) and get_item_count() >= 20) {
menu_position = 20;
play_click_sound();
speak_item = true;
continue;
} else if (key_down(KEY_RSHIFT) and key_repeating(KEY_8) and get_item_count() >= 21) {
menu_position = 21;
play_click_sound();
speak_item = true;
continue;
} else if (key_down(KEY_RSHIFT) and key_repeating(KEY_9) and get_item_count() >= 22) {
menu_position = 22;
play_click_sound();
speak_item = true;
continue;
} else if (key_down(KEY_RSHIFT) and key_repeating(KEY_0) and get_item_count() >= 23) {
menu_position = 23;
play_click_sound();
speak_item = true;
continue;
} else if (key_down(KEY_RSHIFT) and key_repeating(KEY_MINUS) and get_item_count() >= 24) {
menu_position = 24;
play_click_sound();
speak_item = true;
continue;
} else if (key_down(KEY_RSHIFT) and key_repeating(KEY_EQUALS) and get_item_count() >= 25) {
menu_position = 25;
play_click_sound();
speak_item = true;
continue;
} else if (key_down(KEY_RSHIFT) and key_repeating(KEY_BACK) and get_item_count() >= 26) {
menu_position = 26;
play_click_sound();
speak_item = true;
continue;
}
}
if(enable_enter == true and key_repeating(KEY_RETURN) or enable_space == true and key_pressed(KEY_SPACE)) {
if(menu_position != 0) {
play_enter_sound();
if (item_list[menu_position - 1].activate == true) {
running = false;
return menu_position;
}
}
}
if(key_repeating(KEY_TAB))
{
    if (is_intro_tts == true) {
        if (speech_output > 0 && speech_output < 5) {
            screen_reader_speak_interrupt(speech_output, intro);
        } else if (force_sapi == false) {
            tts.stop();
            speak(intro);
        } else {
            internal_tts.speak_interrupt(intro);
        }
    } else {
        if (internal_sound.load(fn(intro), @spool.pack_file)) {
            internal_sound.play();
        }
    }
}
if(allow_escape == true)
{
if(key_repeating(KEY_ESCAPE))
{
spool.play_stationary(find_sound("sounds/"+soundpack+"/menus/"+menutype+"/*close*"),false);
running = false;
return 0;
}
}
if (key_down(volkeydown) and voltimer.elapsed >= voltime and menumusvolume > -50) {
menumusvolume -= 2;
music.set_volume(menumusvolume);
writepreffs();
voltimer.restart();
}
if (key_down(volkeyup) and voltimer.elapsed >= voltime and menumusvolume < 0) {
menumusvolume += 2;
music.set_volume(menumusvolume);
writepreffs();
voltimer.restart();
}
if(enable_up_and_down == true and key_repeating(KEY_UP)) {
initial = false;
for(uint i = 0; i < up_and_down_skip_amount; i++) {
                    if(menu_position == 0) {
                        menu_position = item_count;
                    } else if(menu_position == 1) {
                        if(wrap == true) {
                            menu_position = item_count;
                            spool.play_stationary(wrap_sound, false);
                            break;
                        } else {
                            if (click_at_edge == true)
                                play_click_sound();
                            if (repeat_items_at_edges == true)
                                speak_item = true;
                            play_edge_sound();
                            break;
                        }
                    } else {
                        menu_position -= 1;
                    }
                }
                play_click_sound();
                speak_item = true;
                continue;
            }
            if(enable_up_and_down == true and key_repeating(KEY_DOWN)) {
    initial = false;
                for(uint i = 0; i < up_and_down_skip_amount; i++) {
                    if(menu_position == item_count) {
                        if(wrap == true) {
                            menu_position = 1;
                            spool.play_stationary(wrap_sound, false);
                            break;
                        } else {
                            if (click_at_edge == true)
                                play_click_sound();
                            if (repeat_items_at_edges == true)
                                speak_item = true;
                            play_edge_sound();
                            break;
                        }
                    } else {
                        menu_position += 1;
                    }
                }
                play_click_sound();
                speak_item = true;
                continue;
}
if(enable_left_and_right == true and key_repeating(KEY_LEFT)) {
                initial = false;
                if(menu_position == 0) {
                    menu_position = item_count;
                    play_click_sound();
                    speak_item = true;
                    continue;
                }
                if(menu_position == 1) {
                    if(wrap == true) {
                        menu_position = item_count;
                        spool.play_stationary(wrap_sound, false);
                        play_click_sound();
                        speak_item = true;
                        continue;
                    } else {
                        if (click_at_edge == true)
                            play_click_sound();
                        if (repeat_items_at_edges == true)
                            speak_item = true;
                        play_edge_sound();
                        continue;
                    }
                }
                menu_position -= 1;
                play_click_sound();
                speak_item = true;
                continue;
            }

            if(enable_left_and_right == true and key_repeating(KEY_RIGHT)) {
                initial = false;
                if(menu_position == item_count) {
                    if(wrap == true) {
                        menu_position = 1;
                        spool.play_stationary(wrap_sound, false);
                        play_click_sound();
                        speak_item = true;
                        continue;
                    } else {
                        if (click_at_edge == true)
                            play_click_sound();
                        if (repeat_items_at_edges == true)
                            speak_item = true;
                        play_edge_sound();
                        continue;
                    }
                }
                menu_position += 1;
                play_click_sound();
                speak_item = true;
                continue;
            }
if(enable_home_and_end == true) {
if(key_repeating(KEY_HOME)) {
initial = false;
menu_position = 1;
play_click_sound();
speak_item = true;
continue;
}
if(key_repeating(KEY_END)) {
initial = false;
menu_position = item_count;
play_click_sound();
speak_item = true;
continue;
}
}
wait(3);
}
running = false;
return -1;
}

bool reset(bool completely) {
/*
if(running==true)
{
return false;
}
*/
running = false;
item_list.resize(0);
if(completely == true) {
letters_autospeak = true;
letters_autoactivate = false;
speak_letter = false;
enable_first_letter_navigation = false;
click_at_edge = false;
repeat_items_at_edges = false;
music_added = false;
volkeyup = KEY_PRIOR;
volkeydown = KEY_NEXT;
enable_space = false;
enable_enter = true;
speak_position_information = false;
open_sound = "";
edge_sound = "";
music.close();
click_sound = "";
force_sapi = false;
enable_up_and_down = false;
enable_left_and_right = false;
wrap = true;
allow_escape = true;
enable_home_and_end = false;
speech_output = 0;
@tts_handle = null;
@sound_handle = null;
@callback_handle = null;
}
return true;
}


tts_voice@ tts_handle;
sound@ sound_handle;
int speech_output;
menu_callback@ callback_handle;
string callback_data;
bool running;
int menu_position;
dynamic_menu_item[] item_list;

int add_item_extended(string filename, bool is_filename, string name = "", string key = "", bool act = true) {
if(running == true)
return -1;
int new_index = item_list.length();
item_list.resize(new_index + 1);
item_list[new_index].option = filename;
item_list[new_index].is_filename = is_filename;
item_list[new_index].name = name;
item_list[new_index].activate = act;
if (key == "") {
key = filename[0];
key = string_to_lower_case(key);
}
item_list[new_index].letter = key;
return new_index + 1;
}
}
funcdef int menu_callback(dynamic_menu_pro@, string);
const string translate(const string&in text) {
return text;
}

const string fn(const string&in file) {
return file;
}

void setupmenu(bool music_added=false)
{
if(mreset==1) m.reset(true);
else if(mreset==0) m.reset(false);
if(music_added==true) m.add_music(find_sound("sounds/"+soundpack+"/menus/"+menutype+"/*music*"));
else if(music_added==false) m.add_music("");
if(up_down==1) m.enable_up_and_down=true;
else if(up_down==0) m.enable_up_and_down=false;
if(left_right==1) m.enable_left_and_right=true;
else if(left_right==0) m.enable_left_and_right=false;
if(home_end==1) m.enable_home_and_end=true;
else if(home_end==0) m.enable_home_and_end=false;
if(wrap==1) m.wrap=true;
else if(wrap==0) m.wrap=false;
if(repeat_items==1) m.repeat_items_at_edges=true;
else if(repeat_items==0) m.repeat_items_at_edges=false;
if(numbers==1) m.enable_numbers=true;
else if(numbers==0) m.enable_numbers=false;
if(first_letter==1) m.enable_first_letter_navigation=true;
else if(first_letter==0) m.enable_first_letter_navigation=false;
if(position_info==1) m.speak_position_information=true;
else if(position_info==0) m.speak_position_information=false;
if(side_scroll==1) m.enable_side_scrolling=true;
else if(side_scroll==0) m.enable_side_scrolling=false;
m.click_sound=(find_sound("sounds/"+soundpack+"/menus/"+menutype+"/*click*"));
m.edge_sound=(find_sound("sounds/"+soundpack+"/menus/"+menutype+"/*edge*"));
m.enter_sound=(find_sound("sounds/"+soundpack+"/menus/"+menutype+"/*enter*"));
m.open_sound=(find_sound("sounds/"+soundpack+"/menus/"+menutype+"/*open*"));
m.wrap_sound=(find_sound("sounds/"+soundpack+"/menus/"+menutype+"/*wrap*"));
m.set_up_and_down_skip_amount(mskipnum);
}
void setupmenu2(bool main=true)
{
m.set_up_and_down_skip_amount(mskipnum);
m.reset(false);
if (main==true)
m.add_music("");
m.click_at_edge=true;
m.enable_enter=true;
m.enable_numbers=false;
m.enable_up_and_down=true;
m.enable_left_and_right=true;
m.enable_home_and_end=true;
m.enable_side_scrolling=false;
m.allow_escape=true;
m.wrap=true;
m.repeat_items_at_edges=true;
m.enable_first_letter_navigation=true;
m.speak_position_information=false;
m.click_sound="none.ogg";
m.edge_sound="none.ogg";
m.enter_sound=(find_sound("sounds/"+soundpack+"/menus/"+menutype+"/*enter*"));
m.open_sound=(find_sound("sounds/"+soundpack+"/menus/"+menutype+"/*open*"));
m.wrap_sound="none.ogg";
}

void fade(sound@ handle, double final_volume = -50, double delay = 25)
{
if (handle.volume == final_volume or !handle.active)
return;
while(round(handle.volume, 0) != round(final_volume, 0) and handle.playing) {
if (handle.volume > final_volume)
handle.volume = handle.volume - 1;
else if (handle.volume < final_volume)
handle.volume = handle.volume + 1;
else
break;
wait (delay);
}
}
