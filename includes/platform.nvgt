bool platformmove;
moving_platform@[]moving_platforms(0);
class moving_platform
{
    int platsound;
    int platform_id;
    double minx, maxx, miny, maxy;
    double currentx, currenty;
    double sizex;
    string tile;
    string mplattype;
    int move_mode;
    int snap_mode;
    double speed;
    bool moving_forward;
    double move_accumulator_x, move_accumulator_y;
    double tilevolume;
    double tilepitch;
    double mplatvolume;
    double mplatpitch;
    double offset_volume;

    moving_platform(double left_x, double right_x, double bottom_y, double top_y, double x_length, int direction, int snap, int speed_in, string ty, double vol, double semitone, string mptype, double vol2, double semitone2, double vol_offset)
    {
        minx = left_x;
        maxx = right_x;
        miny = bottom_y;
        maxy = top_y;
        sizex = x_length;
        currentx = minx;
        currenty = miny;
        move_mode = direction;
        snap_mode = snap;
        if (speed_in <= 0) speed_in = 1;
        speed = 1.0 / speed_in;
        tile = ty;
        tilevolume = vol;
        tilepitch = semitone;
        mplattype = mptype;
        mplatvolume = vol2;
        mplatpitch = semitone2;
        offset_volume = vol_offset;
        moving_forward = true;
        move_accumulator_x = 0;
        move_accumulator_y = 0;        
        platform_id = spawn_platform(left_x, left_x + x_length, bottom_y, bottom_y + 1, tile, tilevolume, tilepitch);        
        platsound = platpool.play_extended_2d(find_sound("sounds/"+soundpack+"/objects/moving platforms/" + mplattype + "/*loop*"), me.x, me.y, currentx, currenty, 0, 0, 0, 0, true, 0, 0, mplatvolume, mplatpitch, false);
        update_platform_sound();
    }
void update_platform_sound()
    {
        platpool.update_sound_2d(platsound, currentx, currenty);
        platpool.update_sound_range_2d(platsound, 0, maxx - minx, 0, maxy - miny);
    }

    bool is_on_platform()
    {
        return (me.x >= currentx - 0.5 && me.x <= currentx + sizex + 0.5 && 
                (me.y == currenty || me.y == currenty - 1 || me.y == currenty + 1));
    }

    void check_player()
    {
        platformmove = is_on_platform();
        if (platformmove)
        {
            me.y = currenty;
        }
    }

    void move()
    {
        double old_x = currentx;
        double old_y = currenty;
        double dx = 0, dy = 0;
        bool reached_endpoint = false;

        switch(move_mode)
        {
            case 0: case 4:
                dx = (move_mode == 0 ? 1 : -1) * (moving_forward ? speed : -speed);
                reached_endpoint = (moving_forward && currentx >= maxx) || (!moving_forward && currentx <= minx);
                break;
            case 1: case 5:
                dy = (move_mode == 1 ? 1 : -1) * (moving_forward ? speed : -speed);
                reached_endpoint = (moving_forward && currenty >= maxy) || (!moving_forward && currenty <= miny);
                break;
            case 2: case 6:
                dx = (move_mode == 2 ? 1 : -1) * (moving_forward ? speed : -speed);
                dy = (move_mode == 2 ? 1 : -1) * (moving_forward ? speed : -speed);
                reached_endpoint = (moving_forward && (currentx >= maxx || currenty >= maxy)) || (!moving_forward && (currentx <= minx || currenty <= miny));
                break;
            case 3: case 7:
                dx = (move_mode == 3 ? -1 : 1) * (moving_forward ? speed : -speed);
                dy = (move_mode == 3 ? 1 : -1) * (moving_forward ? speed : -speed);
                reached_endpoint = (moving_forward && (currentx <= minx || currenty >= maxy)) || (!moving_forward && (currentx >= maxx || currenty <= miny));
                break;
        }

        move_accumulator_x += dx;
        move_accumulator_y += dy;

        if(abs(move_accumulator_x) >= 1)
        {
            int steps = int(move_accumulator_x);
            currentx += steps;
            move_accumulator_x -= steps;
        }

        if(abs(move_accumulator_y) >= 1)
        {
            int steps = int(move_accumulator_y);
            currenty += steps;
            move_accumulator_y -= steps;
        }

        if(reached_endpoint)
        {
            switch(snap_mode)
            {
                case 0:
                    moving_forward = !moving_forward;
                    break;
                case 1:
                    if(moving_forward)
                    {
                        currentx = minx;
                        currenty = miny;
                    }
                    break;
                case 2:
                    if(!moving_forward)
                    {
                        currentx = maxx;
                        currenty = maxy;
                    }
                    break;
                case 3:
                    if(moving_forward)
                    {
                        currentx = maxx;
                        currenty = maxy;
                    }
                    else
                    {
                        currentx = minx;
                        currenty = miny;
                    }
                    break;
            }
        }

        currentx = clamp(currentx, minx, maxx);
        currenty = clamp(currenty, miny, maxy);
        update_platform(platform_id, currentx, currentx + sizex, currenty, currenty + 1);        
        if(platformmove)
        {
            me.x += (currentx - old_x);
            me.y += (currenty - old_y);
            me.x = clamp(me.x, currentx, currentx + sizex);
            me.y = clamp(me.y, currenty, currenty + 1);
        }
        update_platform_sound();
        if(platformmove)
        {
            platpool.update_sound_start_values(platsound, -1, mplatvolume - offset_volume, -1);
        }
        else
        {
            platpool.update_sound_start_values(platsound, -1, mplatvolume, -1);
        }
    }
};

void mplatcheck()
{
    for(uint i = 0; i < moving_platforms.length(); i++)
    {
        moving_platforms[i].check_player();
        moving_platforms[i].move();
    }
}

void spawn_moving_platform(double left_x, double right_x, double bottom_y, double top_y, double x_length, int direction, int snap, int speed, string ty, double vol, double semitone, string mptype, double vol2, double semitone2, double vol_offset)
{
    moving_platform mp1(left_x, right_x, bottom_y, top_y, x_length, direction, snap, speed, ty, vol, semitone, mptype, vol2, semitone2, vol_offset);
    moving_platforms.insert_last(mp1);
}

void destroy_all_moving_platforms()
{
    for(uint i = 0; i < moving_platforms.length(); i++)
    {
        platpool.destroy_sound(moving_platforms[i].platsound);
        remove_platform(moving_platforms[i].platform_id);
    }
    moving_platforms.resize(0);
    platformmove = false;
}

platform@[]platforms(0);
class platform
{
double minx, maxx, miny, maxy;
double volume;
double pitch;
string tile;
platform(double mx,double mx2,double my,double my2,string ty,double vol,double semitone)
{
minx=mx;
maxx=mx2;
miny=my;
maxy=my2;
tile=ty;
volume=vol;
pitch=semitone;
}
}
int spawn_platform(double x1, double x2, double y1, double y2, string tile, double tilevol, double tilepitch)
{
    platform pl1(x1, x2, y1, y2, tile, tilevol, tilepitch);
    platforms.insert_last(pl1);
    return platforms.length() - 1;
}
void update_platform(int id, double x1, double x2, double y1, double y2)
{
    if (id >= 0 && id < platforms.length())
    {
        platforms[id].minx = x1;
        platforms[id].maxx = x2;
        platforms[id].miny = y1;
        platforms[id].maxy = y2;
    }
}
void remove_platform(int id)
{
    if (id >= 0 && id < platforms.length())
    {
        platforms.remove_at(id);
    }
}
void destroy_all_platforms()
{
platforms.resize(0);
}
