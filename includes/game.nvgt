character@[]charas(0);
class character
{
string weapontype;
string weapontype2;
string shieldtype;
int shieldweight;
double attack;
double defence;
double points;
double health;
double maxhealth;
double lifecard;
double level;
double levmod;
double xp;
double xpmod;
double xprequiered;
int charbuysound;
int charcamsound;
int charcamsound2;
int charcamsound3;
int chardeathsound;
int charfallsound;
int charfallsound2;
int charhurtsound;
int charhealsound;
int charhealsound2;
int charhealsound3;
int charinvsound;
int charjumpsound;
int charjumpsound2;
int charkillsound;
int charlandsound;
int charlevsound;
int charlifesound;
int charmovesound;
int charshakesound;
int charsitsound;
int charstandsound;
int charswingsound;
int chartelsound;
int chartelsound2;
int chartelsound3;
int charturnsound;
character(const string&in weapontype,const string&in weapontype2,const string&in shieldtype,int shieldweight,double attack,double defence,double points,double health,double maxhealth,double lifecard,double level,double levmod,double xp,double xpmod,double xprequiered,int charbuysound,int charcamsound,int charcamsound2,int charcamsound3,int chardeathsound,int charfallsound,int charfallsound2,int charhealsound,int charhealsound2,int charhealsound3,int charhurtsound,int charinvsound,int charjumpsound,int charjumpsound2,int charkillsound,int charlandsound,int charlevsound,int charlifesound,int charmovesound,int charshakesound,int charsitsound,int charstandsound,int charswingsound,int chartelsound,int chartelsound2,int chartelsound3,int charturnsound)
{
this.weapontype=weapontype;
this.weapontype2=weapontype2;
this.shieldtype=shieldtype;
this.shieldweight=shieldweight;
this.attack=attack;
this.defence=defence;
this.points=points;
this.health=health;
this.maxhealth=maxhealth;
this.lifecard=lifecard;
this.level=level;
this.levmod=levmod;
this.xp=xp;
this.xpmod=xpmod;
this.xprequiered=xprequiered;
this.charbuysound=charbuysound;
this.charcamsound=charcamsound;
this.charcamsound2=charcamsound2;
this.charcamsound3=charcamsound3;
this.chardeathsound=chardeathsound;
this.charfallsound=charfallsound;
this.charfallsound2=charfallsound2;
this.charhurtsound=charhurtsound;
this.charhealsound=charhealsound;
this.charhealsound2=charhealsound2;
this.charhealsound3=charhealsound3;
this.charinvsound=charinvsound;
this.charjumpsound=charjumpsound;
this.charjumpsound2=charjumpsound2;
this.charkillsound=charkillsound;
this.charlandsound=charlandsound;
this.charlevsound=charlevsound;
this.charlifesound=charlifesound;
this.charmovesound=charmovesound;
this.charshakesound=charshakesound;
this.charsitsound=charsitsound;
this.charstandsound=charstandsound;
this.charswingsound=charswingsound;
this.chartelsound=chartelsound;
this.chartelsound2=chartelsound2;
this.chartelsound3=chartelsound3;
this.charturnsound=charturnsound;
}
}
void add_character(const string&in weapontype,const string&in weapontype2,const string&in shieldtype,int shieldweight,double attack,double defence,double points,double health,double maxhealth,double lifecard,double level,double levmod,double xp,double xpmod,double xprequiered,int charbuysound,int charcamsound,int charcamsound2,int charcamsound3,int chardeathsound,int charfallsound,int charfallsound2,int charhealsound,int charhealsound2,int charhealsound3,int charhurtsound,int charinvsound,int charjumpsound,int charjumpsound2,int charkillsound,int charlandsound,int charlevsound,int charlifesound,int charmovesound,int charshakesound,int charsitsound,int charstandsound,int charswingsound,int chartelsound,int chartelsound2,int chartelsound3,int charturnsound)
{
character ch1(weapontype,weapontype2,shieldtype,shieldweight,attack,defence,points,health,maxhealth,lifecard,level,levmod,xp,xpmod,xprequiered,charbuysound,charcamsound,charcamsound2,charcamsound3,chardeathsound,charfallsound,charfallsound2,charhealsound,charhealsound2,charhealsound3,charhurtsound,charinvsound,charjumpsound,charjumpsound2,charkillsound,charlandsound,charlevsound,charlifesound,charmovesound,charshakesound,charsitsound,charstandsound,charswingsound,chartelsound,chartelsound2,chartelsound3,charturnsound);
charas.insert_last(ch1);
}
void destroy_all_charas()
{
charas.resize(0);
}

shield@[]shields(0);
class shield
{
double shielddefence;
int shieldmode;
int shieldweight;
double shieldstrength;
double maxshieldstrength;
double shieldlevel;
int shieldbreaksound;
int shielddrawsound;
int shieldhitsound;
int shieldloopsound;
int shieldremovesound;
int shieldwearsound;
shield(double shielddefence,int shieldmode,int shieldweight,double shieldstrength,double maxshieldstrength,double shieldlevel,int shieldbreaksound,int shielddrawsound,int shieldhitsound,int shieldloopsound,int shieldremovesound,int shieldwearsound)
{
this.shielddefence=shielddefence;
this.shieldmode=shieldmode;
this.shieldweight=shieldweight;
this.shieldstrength=shieldstrength;
this.maxshieldstrength=maxshieldstrength;
this.shieldlevel=shieldlevel;
this.shieldbreaksound=shieldbreaksound;
this.shielddrawsound=shielddrawsound;
this.shieldhitsound=shieldhitsound;
this.shieldloopsound=shieldloopsound;
this.shieldremovesound=shieldremovesound;
this.shieldwearsound=shieldwearsound;
}
}
void add_shield(double shielddefence,int shieldmode,int shieldweight,double shieldstrength,double maxshieldstrength,double shieldlevel,int shieldbreaksound,int shielddrawsound,int shieldhitsound,int shieldloopsound,int shieldremovesound,int shieldwearsound)
{
shield sd1(shielddefence,shieldmode,shieldweight,shieldstrength,maxshieldstrength,shieldlevel,shieldbreaksound,shielddrawsound,shieldhitsound,shieldloopsound,shieldremovesound,shieldwearsound);
shields.insert_last(sd1);
}
void destroy_all_shields()
{
shields.resize(0);
}

weapon@[]weapons(0);
class weapon
{
int wepdamage;
int wephold;
int weprange;
int weprange2;
int wepspeed;
int weapontime;
int weapontime2;
int wepweight;
double ammo;
double loadedammo;
double maxammo;
double weplevel;
int wepdrawsound;
int wepemptysound;
int wepfiresound;
int wephitsound;
int weploopsound;
int weprecsound;
int wepreloadsound;;
int wepshellsound;
weapon(int wepdamage,int wephold,int weprange,int weprange2,int wepspeed,int weapontime,int weapontime2,int wepweight,double ammo,double loadedammo,double maxammo,double weplevel,int wepdrawsound,int wepemptysound,int wepfiresound,int wephitsound,int weploopsound,int weprecsound,int wepreloadsound,int wepshellsound)
{
this.wepdamage=wepdamage;
this.wephold=wephold;
this.weprange=weprange;
this.weprange2=weprange2;
this.wepspeed=wepspeed;
this.weapontime=weapontime;
this.weapontime2=weapontime2;
this.wepweight=wepweight;
this.ammo=ammo;
this.loadedammo=loadedammo;
this.maxammo=maxammo;
this.weplevel=weplevel;
this.wepdrawsound=wepdrawsound;
this.wepemptysound=wepemptysound;
this.wepfiresound=wepfiresound;
this.wephitsound=wephitsound;
this.weploopsound=weploopsound;
this.weprecsound=weprecsound;
this.wepreloadsound=wepreloadsound;
this.wepshellsound=wepshellsound;
}
}
void add_weapon(int wepdamage,int wephold,int weprange,int weprange2,int wepspeed,int weapontime,int weapontime2,int wepweight,double ammo,double loadedammo,double maxammo,double weplevel,int wepdrawsound,int wepemptysound,int wepfiresound,int wephitsound,int weploopsound,int weprecsound,int wepreloadsound,int wepshellsound)
{
weapon wp1(wepdamage,wephold,weprange,weprange2,wepspeed,weapontime,weapontime2,wepweight,ammo,loadedammo,maxammo,weplevel,wepdrawsound,wepemptysound,wepfiresound,wephitsound,weploopsound,weprecsound,wepreloadsound,wepshellsound);
weapons.insert_last(wp1);
}
void destroy_all_weapons()
{
weapons.resize(0);
}

void charparse()
{
if(file_exists("sounds/"+soundpack+"/characters/"+chartype+"/info.sif"))
{
bool success=info.open("sounds/"+soundpack+"/characters/"+chartype+"/info.sif", "rb");
if(!success)
{
mainmenu();
}
string content=info.read();
string[] lines=string_split(content,"\r\n",true);
for(uint i=0; i<lines.length(); i++)
{
string[] data=string_split(lines[i],"=",true);
if (data.length()<2)
{
alert("Error","Error reading line "+(i+1)+".");
mainmenu();
}
if (data[0]=="name")
{
name=data[1];
}
if (data[0]=="weapon type")
{
weapontype=data[1];
}
if (data[0]=="weapon type2")
{
weapontype2=data[1];
}
if (data[0]=="shield type")
{
shieldtype=data[1];
}
if (data[0]=="shield weight")
{
shieldweight=parse_int(data[1]);
}
if (data[0]=="attack")
{
attack=parse_double(data[1]);
}
if (data[0]=="defence")
{
defence=parse_double(data[1]);
}
if (data[0]=="points")
{
points=parse_double(data[1]);
}
if (data[0]=="health")
{
health=parse_double(data[1]);
maxhealth=parse_double(data[1]);
}
if (data[0]=="lives")
{
lifecard=parse_double(data[1]);
}
if (data[0]=="level")
{
level=parse_double(data[1]);
}
if (data[0]=="level modifier")
{
levmod=parse_double(data[1]);
}
if (data[0]=="experience")
{
xp=parse_double(data[1]);
}
if (data[0]=="experience modifier")
{
xpmod=parse_double(data[1]);
}
if (data[0]=="experience required")
{
xprequiered=parse_double(data[1]);
}
if(data[0]=="buy sound")
{
charbuysound=parse_int(data[1]);
}
if(data[0]=="cam sound")
{
charcamsound=parse_int(data[1]);
}
if(data[0]=="cam sound2")
{
charcamsound2=parse_int(data[1]);
}
if(data[0]=="cam sound3")
{
charcamsound3=parse_int(data[1]);
}
if(data[0]=="death sound")
{
chardeathsound=parse_int(data[1]);
}
if(data[0]=="fall sound")
{
charfallsound=parse_int(data[1]);
}
if(data[0]=="fall sound2")
{
charfallsound2=parse_int(data[1]);
}
if(data[0]=="heal sound")
{
charhealsound=parse_int(data[1]);
}
if(data[0]=="heal sound2")
{
charhealsound2=parse_int(data[1]);
}
if(data[0]=="heal sound3")
{
charhealsound3=parse_int(data[1]);
}
if(data[0]=="hurt sound")
{
charhurtsound=parse_int(data[1]);
}
if(data[0]=="inv sound")
{
charinvsound=parse_int(data[1]);
}
if(data[0]=="jump sound")
{
charjumpsound=parse_int(data[1]);
}
if(data[0]=="jump sound2")
{
charjumpsound2=parse_int(data[1]);
}
if(data[0]=="land sound")
{
charlandsound=parse_int(data[1]);
}
if(data[0]=="kill sound")
{
charkillsound=parse_int(data[1]);
}
if(data[0]=="lev sound")
{
charlevsound=parse_int(data[1]);
}
if(data[0]=="life sound")
{
charlifesound=parse_int(data[1]);
}
if(data[0]=="move sound")
{
charmovesound=parse_int(data[1]);
}
if(data[0]=="rock sound")
{
charshakesound=parse_int(data[1]);
}
if(data[0]=="sit sound")
{
charsitsound=parse_int(data[1]);
}
if(data[0]=="stand sound")
{
charstandsound=parse_int(data[1]);
}
if(data[0]=="swing sound")
{
charswingsound=parse_int(data[1]);
}
if(data[0]=="tel sound")
{
chartelsound=parse_int(data[1]);
}
if(data[0]=="tel sound2")
{
chartelsound2=parse_int(data[1]);
}
if(data[0]=="tel sound3")
{
chartelsound3=parse_int(data[1]);
}
if(data[0]=="turn sound")
{
charturnsound=parse_int(data[1]);
}
}
add_character(weapontype, weapontype2, shieldtype, shieldweight, attack, defence, points, health, health, lifecard, level, levmod, xp, xpmod, xprequiered, charbuysound, charcamsound, charcamsound2, charcamsound3, chardeathsound, charfallsound, charfallsound2, charhealsound, charhealsound2, charhealsound3, charhurtsound, charinvsound, charjumpsound, charjumpsound2, charkillsound, charlandsound, charlevsound, charlifesound, charmovesound, charshakesound, charsitsound, charstandsound, charswingsound, chartelsound, chartelsound2, chartelsound3, charturnsound);
}
}
void arseparse(string wepcad)
{
if(file_exists("sounds/"+soundpack+"/equipments/weapons/"+wepcad+"/"+weapontype2+"/info.sif"))
{
bool success=info.open("sounds/"+soundpack+"/equipments/weapons/"+wepcad+"/"+weapontype2+"/info.sif", "rb");
if(!success)
{
mainmenu();
}
string content=info.read();
string[] lines=string_split(content,"\r\n",true);
for(uint i=0; i<lines.length(); i++)
{
string[] data=string_split(lines[i],"=",true);
if (data.length()<2)
{
alert("Error","Error reading line "+(i+1)+".");
mainmenu();
}
if (data[0]=="name")
{
name=data[1];
}
if (data[0]=="damage")
{
wepdamage=parse_int(data[1]);
}
if (data[0]=="mode")
{
wephold=parse_int(data[1]);
}
if (data[0]=="horizontal range")
{
weprange=parse_int(data[1]);
}
if (data[0]=="vertical range")
{
weprange2=parse_int(data[1]);
}
if (data[0]=="bullet speed")
{
wepspeed=parse_int(data[1]);
}
if (data[0]=="repeat time")
{
weapontime=parse_int(data[1]);
}
if (data[0]=="spam time")
{
weapontime2=parse_int(data[1]);
}
if (data[0]=="weight")
{
wepweight=parse_int(data[1]);
}
if (data[0]=="ammo")
{
ammo=parse_double(data[1]);
}
if (data[0]=="loaded ammo")
{
loadedammo=parse_double(data[1]);
}
if (data[0]=="max ammo")
{
maxammo=parse_double(data[1]);
}
if (data[0]=="unlock level")
{
weplevel=parse_double(data[1]);
}
if(data[0]=="draw sound")
{
wepdrawsound=parse_int(data[1]);
}
if(data[0]=="empty sound")
{
wepemptysound=parse_int(data[1]);
}
if(data[0]=="fire sound")
{
wepfiresound=parse_int(data[1]);
}
if(data[0]=="hit sound")
{
wephitsound=parse_int(data[1]);
}
if(data[0]=="loop sound")
{
weploopsound=parse_int(data[1]);
}
if(data[0]=="rec sound")
{
weprecsound=parse_int(data[1]);
}
if(data[0]=="reload sound")
{
wepreloadsound=parse_int(data[1]);
}
if(data[0]=="shell sound")
{
wepshellsound=parse_int(data[1]);
}
}
add_weapon(wepdamage, wephold, weprange, weprange2, wepspeed, weapontime, weapontime2, wepweight, ammo, loadedammo, maxammo, weplevel, wepdrawsound, wepemptysound, wepfiresound, wephitsound, weploopsound, weprecsound, wepreloadsound, wepshellsound);
}
}
void shieldparse()
{
if(file_exists("sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/info.sif"))
{
bool success=info.open("sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/info.sif", "rb");
if(!success)
{
mainmenu();
}
string content=info.read();
string[] lines=string_split(content,"\r\n",true);
for(uint i=0; i<lines.length(); i++)
{
string[] data=string_split(lines[i],"=",true);
if (data.length()<2)
{
alert("Error","Error reading line "+(i+1)+".");
mainmenu();
}
if (data[0]=="name")
{
name=data[1];
}
if (data[0]=="defence")
{
shielddefence=parse_int(data[1]);
}
if (data[0]=="mode")
{
shieldmode=parse_int(data[1]);
}
if (data[0]=="weight")
{
shieldweight=parse_int(data[1]);
}
if (data[0]=="shield strength")
{
shieldstrength=parse_double(data[1]);
maxshieldstrength=parse_double(data[1]);
}
if (data[0]=="unlock level")
{
shieldlevel=parse_double(data[1]);
}
if(data[0]=="break sound")
{
shieldbreaksound=parse_int(data[1]);
}
if(data[0]=="draw sound")
{
shielddrawsound=parse_int(data[1]);
}
if(data[0]=="hit sound")
{
shieldhitsound=parse_int(data[1]);
}
if(data[0]=="loop sound")
{
shieldloopsound=parse_int(data[1]);
}
if(data[0]=="remove sound")
{
shieldremovesound=parse_int(data[1]);
}
if(data[0]=="wear sound")
{
shieldwearsound=parse_int(data[1]);
}
}
add_shield(shielddefence, shieldmode, shieldweight, shieldstrength, shieldstrength, shieldlevel, shieldbreaksound, shielddrawsound, shieldhitsound, shieldloopsound, shieldremovesound, shieldwearsound);
}
}
void weaponparse()
{
arseparse("archery");
arseparse("artillery");
arseparse("explosive");
arseparse("melee");
}

void update_char_attack(double new_attack)
{
    if (info.open("sounds/"+soundpack+"/characters/"+chartype+"/info.sif", "r")) {
        string content = info.read();
        info.close();        
        int attack_pos = string_contains(content, "attack=", 1);
        if (attack_pos != -1) {
            int value_start = attack_pos + 7;
            int value_end = string_contains(content.substr(value_start), "\r\n", 1);
            if (value_end == -1) value_end = content.length() - value_start;
            string current_attack = string_trim_sides(content.substr(value_start, value_end));            
            string old_value = "attack=" + current_attack;
            string new_value = "attack=" + string(new_attack);
            content = string_replace(content, old_value, new_value, true);
            if (info.open("sounds/"+soundpack+"/characters/"+chartype+"/info.sif", "w")) {
                uint bytes_written = info.write(content);
                info.close();
                if (bytes_written == content.length()) {
                    speak("Attack stat updated successfully.");
                } else {
                    speak("Failed to write updated attack stat to file.");
                }
            } else {
                speak("Failed to open file for writing.");
            }
        } else {
            speak("Attack stat not found in file.");
        }
    } else {
        speak("Failed to open file for reading.");
    }
}
void update_char_defence(double new_defence)
{
    if (info.open("sounds/"+soundpack+"/characters/"+chartype+"/info.sif", "r")) {
        string content = info.read();
        info.close();
        int defence_pos = string_contains(content, "defence=", 1);
        if (defence_pos != -1) {
            int value_start = defence_pos + 8;
            int value_end = string_contains(content.substr(value_start), "\r\n", 1);
            if (value_end == -1) value_end = content.length() - value_start;
            string current_defence = string_trim_sides(content.substr(value_start, value_end));
            string old_value = "defence=" + current_defence;
            string new_value = "defence=" + string(new_defence);
            content = string_replace(content, old_value, new_value, true);
            if (info.open("sounds/"+soundpack+"/characters/"+chartype+"/info.sif", "w")) {
                uint bytes_written = info.write(content);
                info.close();
                if (bytes_written == content.length()) {
                    speak("Defence stat updated successfully.");
                } else {
                    speak("Failed to write updated defence stat to file.");
                }
            } else {
                speak("Failed to open file for writing.");
            }
        } else {
            speak("Defence stat not found in file.");
        }
    } else {
        speak("Failed to open file for reading.");
    }
}
void update_char_maxhealth(double new_maxhealth)
{
    if (info.open("sounds/"+soundpack+"/characters/"+chartype+"/info.sif", "r")) {
        string content = info.read();
        info.close();
        int maxhealth_pos = string_contains(content, "max health=", 1);
        if (maxhealth_pos != -1) {
            int value_start = maxhealth_pos + 11;
            int value_end = string_contains(content.substr(value_start), "\r\n", 1);
            if (value_end == -1) value_end = content.length() - value_start;
            string current_maxhealth = string_trim_sides(content.substr(value_start, value_end));
            string old_value = "max health=" + current_maxhealth;
            string new_value = "max health=" + string(new_maxhealth);
            content = string_replace(content, old_value, new_value, true);
            int health_pos = string_contains(content, "health=", 1);
            if (health_pos != -1) {
                value_start = health_pos + 7;
                value_end = string_contains(content.substr(value_start), "\r\n", 1);
                if (value_end == -1) value_end = content.length() - value_start;
                string current_health = string_trim_sides(content.substr(value_start, value_end));
                old_value = "health=" + current_health;
                new_value = "health=" + string(new_maxhealth);
                content = string_replace(content, old_value, new_value, true);
            }
            if (info.open("sounds/"+soundpack+"/characters/"+chartype+"/info.sif", "w")) {
                uint bytes_written = info.write(content);
                info.close();
                if (bytes_written == content.length()) {
                    speak("Max health and health stats updated successfully.");
                } else {
                    speak("Failed to write updated health stats to file.");
                }
            } else {
                speak("Failed to open file for writing.");
            }
        } else {
            speak("Max health stat not found in file.");
        }
    } else {
        speak("Failed to open file for reading.");
    }
}
void update_char_lives(double new_lives)
{
    if (info.open("sounds/"+soundpack+"/characters/"+chartype+"/info.sif", "r")) {
        string content = info.read();
        info.close();        
        int lives_pos = string_contains(content, "lives=", 1);
        if (lives_pos != -1) {
            int value_start = lives_pos + 6;
            int value_end = string_contains(content.substr(value_start), "\r\n", 1);
            if (value_end == -1) value_end = content.length() - value_start;
            string current_lives = string_trim_sides(content.substr(value_start, value_end));            
            string old_value = "lives=" + current_lives;
            string new_value = "lives=" + string(new_lives);
            content = string_replace(content, old_value, new_value, true);
            if (info.open("sounds/"+soundpack+"/characters/"+chartype+"/info.sif", "w")) {
                uint bytes_written = info.write(content);
                info.close();
                if (bytes_written == content.length()) {
                    speak("lives stat updated successfully.");
                } else {
                    speak("Failed to write updated lives stat to file.");
                }
            } else {
                speak("Failed to open file for writing.");
            }
        } else {
            speak("lives stat not found in file.");
        }
    } else {
        speak("Failed to open file for reading.");
    }
}
void update_wep_ammo(double new_ammo)
{
    if (info.open("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/info.sif", "r")) {
        string content = info.read();
        info.close();
        int ammo_pos = string_contains(content, "ammo=", 1);
        if (ammo_pos != -1) {
            int value_start = ammo_pos + 5;
            int value_end = string_contains(content.substr(value_start), "\r\n", 1);
            if (value_end == -1) value_end = content.length() - value_start;
            string current_ammo = string_trim_sides(content.substr(value_start, value_end));
            string old_value = "ammo=" + current_ammo;
            string new_value = "ammo=" + string(new_ammo);
            content = string_replace(content, old_value, new_value, true);
            if (info.open("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/info.sif", "w")) {
                uint bytes_written = info.write(content);
                info.close();
                if (bytes_written == content.length()) {
                    speak("Ammo stat updated successfully.");
                } else {
                    speak("Failed to write updated ammo stat to file.");
                }
            } else {
                speak("Failed to open file for writing.");
            }
        } else {
            speak("Ammo stat not found in file.");
        }
    } else {
        speak("Failed to open file for reading.");
    }
}
void update_wep_hl_range(int new_hl_range)
{
    if (info.open("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/info.sif", "r")) {
        string content = info.read();
        info.close();
        int range_pos = string_contains(content, "horizontal range=", 1);
        if (range_pos != -1) {
            int value_start = range_pos + 17;
            int value_end = string_contains(content.substr(value_start), "\r\n", 1);
            if (value_end == -1) value_end = content.length() - value_start;
            string current_hl_range = string_trim_sides(content.substr(value_start, value_end));
            string old_value = "horizontal range=" + current_hl_range;
            string new_value = "horizontal range=" + string(new_hl_range);
            content = string_replace(content, old_value, new_value, true);
            if (info.open("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/info.sif", "w")) {
                uint bytes_written = info.write(content);
                info.close();
                if (bytes_written == content.length()) {
                    speak("Horizontal range stat updated successfully.");
                } else {
                    speak("Failed to write updated horizontal range stat to file.");
                }
            } else {
                speak("Failed to open file for writing.");
            }
        } else {
            speak("Horizontal range stat not found in file.");
        }
    } else {
        speak("Failed to open file for reading.");
    }
}
void update_wep_vl_range(int new_vl_range)
{
        if (info.open("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/info.sif", "r")) {
        string content = info.read();
        info.close();
        int range_pos = string_contains(content, "vertical range=", 1);
        if (range_pos != -1) {
            int value_start = range_pos + 15;
            int value_end = string_contains(content.substr(value_start), "\r\n", 1);
            if (value_end == -1) value_end = content.length() - value_start;
            string current_vl_range = string_trim_sides(content.substr(value_start, value_end));
            string old_value = "vertical range=" + current_vl_range;
            string new_value = "vertical range=" + string(new_vl_range);
            content = string_replace(content, old_value, new_value, true);
            if (info.open("sounds/"+soundpack+"/equipments/weapons/"+weapontype+"/"+weapontype2+"/info.sif", "w")) {
                uint bytes_written = info.write(content);
                info.close();
                if (bytes_written == content.length()) {
                    speak("Vertical range stat updated successfully.");
                } else {
                    speak("Failed to write updated vertical range stat to file.");
                }
            } else {
                speak("Failed to open file for writing.");
            }
        } else {
            speak("Vertical range stat not found in file.");
        }
    } else {
        speak("Failed to open file for reading");
    }
}
void update_shield_max_strength(double new_max_strength)
{
    if (info.open("sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/info.sif", "r")) {
        string content = info.read();
        info.close();
        int max_strength_pos = string_contains(content, "max shield strength=", 1);
        if (max_strength_pos != -1) {
            int value_start = max_strength_pos + 20;
            int value_end = string_contains(content.substr(value_start), "\r\n", 1);
            if (value_end == -1) value_end = content.length() - value_start;
            string current_max_strength = string_trim_sides(content.substr(value_start, value_end));
            string old_value = "max shield strength=" + current_max_strength;
            string new_value = "max shield strength=" + string(new_max_strength);
            content = string_replace(content, old_value, new_value, true);
            int strength_pos = string_contains(content, "shield strength=", 1);
            if (strength_pos != -1) {
                value_start = strength_pos + 16;
                value_end = string_contains(content.substr(value_start), "\r\n", 1);
                if (value_end == -1) value_end = content.length() - value_start;
                string current_strength = string_trim_sides(content.substr(value_start, value_end));
                old_value = "shield strength=" + current_strength;
                new_value = "shield strength=" + string(new_max_strength);
                content = string_replace(content, old_value, new_value, true);
            }
            if (info.open("sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/info.sif", "w")) {
                uint bytes_written = info.write(content);
                info.close();
                if (bytes_written == content.length()) {
                    speak("Max shield strength and shield strength stats updated successfully.");
                } else {
                    speak("Failed to write updated shield strength stats to file.");
                }
            } else {
                speak("Failed to open file for writing.");
            }
        } else {
            speak("Max shield strength stat not found in file.");
        }
    } else {
        speak("Failed to open file for reading.");
    }
}
void update_shield_defence(double new_shield_defence)
{
    if (info.open("sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/info.sif", "r")) {
        string content = info.read();
        info.close();
        int shield_defence_pos = string_contains(content, "defence=", 1);
        if (shield_defence_pos != -1) {
            int value_start = shield_defence_pos + 8;
            int value_end = string_contains(content.substr(value_start), "\r\n", 1);
            if (value_end == -1) value_end = content.length() - value_start;
            string current_shield_defence = string_trim_sides(content.substr(value_start, value_end));
            string old_value = "defence=" + current_shield_defence;
            string new_value = "defence=" + string(new_shield_defence);
            content = string_replace(content, old_value, new_value, true);
            if (info.open("sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/info.sif", "w")) {
                uint bytes_written = info.write(content);
                info.close();
                if (bytes_written == content.length()) {
                    speak("Shield defence updated successfully.");
                } else {
                    speak("Failed to write updated shield defence to file.");
                }
            } else {
                speak("Failed to open file for writing.");
            }
        } else {
            speak("Shield defence not found in file.");
        }
    } else {
        speak("Failed to open file for reading.");
    }
}

void game_input()
{
if(key_pressed(KEY_SLASH) and building==true)
{
comparse();
}
if(key_pressed(KEY_I))
{
pause_pools();
itemsmenu();
}
if(key_pressed(KEY_W))
{
pause_pools();
weaponsmenu();
}
if(key_repeating(KEY_S))
{
string[] armor=find_directories("sounds/"+soundpack+"/equipments/shields/*");
if(armor.length()==0)
{
speak("there are no shields available to view.");
}
else if(drawnshield==true)
{
speak("You can't switch to a different shield while the current one is in use.");
}
else
{
destroy_all_shields();
shieldparse();
pause_pools();
string res=shieldsmenu();
if(res!="")
{
drawnshield=true;
shieldtype=res;
}
}
}
if(key_pressed(KEY_O) and building==true)
{
pause_pools();
buildmenu();
}
if(key_repeating(KEY_TAB) and key_up(KEY_LMENU) and key_up(KEY_RMENU))
{
if (shift_is_down())
cycle_inv(0);
else
cycle_inv(1);
}
if(key_repeating(KEY_RETURN) and shift_is_down() and usetimer.elapsed>=usetime)
{
usetimer.restart();
if (inv.get_keys().length()>0 and invpos<inv.get_size())
useitem(inv.get_keys()[invpos]);
else
speak("No item in focus.");
}
if(key_repeating(KEY_LBRACKET) and shift_is_down() and usetimer.elapsed>=usetime)
{
if(inv.get_keys().length()>0 and invpos<inv.get_size())
{
if(facing=="left") itemslot=p.play_extended_2d(find_sound("sounds/"+soundpack+"/equipments/items/unsorted/"+itemtype+"/"+itemtype2+"/*drop*"),me.x-1,me.y,me.x-1,me.y,0,0,0,0,false,0,0,itemvolume,itempitch,false);
if(facing=="right") itemslot=p.play_extended_2d(find_sound("sounds/"+soundpack+"/equipments/items/unsorted/"+itemtype+"/"+itemtype2+"/*drop*"),me.x+1,me.y,me.x+1,me.y,0,0,0,0,false,0,0,itemvolume,itempitch,false);
drop_item(facing, itemtype, itemtype2);
give(itemtype2,-1);
usetimer.restart();
}
else
{
speak("No item in focus.");
}
}
if(alt_is_down() and shift_is_down())
{
if(key_pressed(KEY_LEFT))
{
if(turnmode==0) face_left();
}
if(key_pressed(KEY_RIGHT))
{
if(turnmode==0) face_right();
}
if(key_pressed(KEY_DOWN))
{
if(turnmode==0) face_down();
}
if(key_pressed(KEY_UP))
{
if(turnmode==0) face_up();
}
}
if(shift_is_down())
{
if(key_pressed(KEY_LEFT) and spiable==true)
{
spy("left", spydist);
}
if(key_pressed(KEY_RIGHT) and spiable==true)
{
spy("right", spydist);
}
if(key_pressed(KEY_DOWN) and spiable==true)
{
spy("down", spydist);
}
if(key_pressed(KEY_UP) and spiable==true)
{
spy("up", spydist);
}
}
if(key_down(KEY_G) and key_up(KEY_LSHIFT) and key_up(KEY_RSHIFT))
{
if(key_pressed(KEY_R))
{
bool hazard_found=false;
string tiletype;
if(gct(cam.x,cam.y)=="")
{
tiletype="air";
}
else
{
tiletype=gct(cam.x,cam.y);
}
for(uint i=0; i<hazards.length(); i++)
{
if(cam.x>=hazards[i].minx && cam.x<=hazards[i].maxx && cam.y>=hazards[i].miny && cam.y<=hazards[i].maxy)
{
hazard_found=true;
speak(tiletype+" with "+hazards[i].hazardtype+" hazard, "+cam.x+","+cam.y);
break;
}
}
if(!hazard_found)
{
if(me.x==cam.x and me.y==cam.y)
{
speak(tiletype+" with player, "+cam.x+", "+cam.y);
}
else
{
speak(tiletype+", "+cam.x+", "+cam.y);
}
}
}
if(key_repeating(KEY_M))
{
if(mfc==false)
{
mfc=true;
if(switchsound==1) p.play_stationary("toggleon.ogg",false);
speak("Mfwc enabled.");
}
else if(mfc==true)
{
mfc=false;
if(switchsound==1) p.play_stationary("toggleoff.ogg",false);
speak("Mfwc disabled.");
}
}
if(key_repeating(KEY_T))
{
playcam();
}
if(cleft.pressing())
{
cam_left();
}
if(cright.pressing())
{
cam_right();
}
if(key_pressed(KEY_LEFT))
{
camstep_left();
}
if(key_pressed(KEY_RIGHT))
{
camstep_right();
}
if(cdown.pressing())
{
cam_down();
}
if(cup.pressing())
{
cam_up();
}
if(key_pressed(KEY_DOWN))
{
camstep_down();
}
if(key_pressed(KEY_UP))
{
camstep_up();
}
}
if(key_up(KEY_G))
{
for(uint i=0; i<safezones.length(); i++)
{
safezones[i].cam_in_zone=safezones[i].player_in_zone;
}
cam.x=me.x;
cam.y=me.y;
mfc=false;
}
if(key_pressed(KEY_SEMICOLON))
{
speak("Your maximum jump height is"+jumpheight+"squares");
}
if(key_pressed(KEY_APOSTROPHE))
{
speak("You are at speed"+modspeed);
}
if(key_down(KEY_LEFT) and key_up(KEY_G) and key_up(KEY_LSHIFT) and key_up(KEY_RSHIFT) and movetimer.elapsed>=movetime)
{
if(keyrowhold==1 and moveable==true and doormove==false  and psdoormove==false)
{
move_left();
movetimer.restart();
}
else if(keyrowhold==1 and moveable==false and sitting==true)
{
if(charshakesound==1) p.play_stationary(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*rock*"),false);
movetimer.restart();
}
}
if(key_down(KEY_RIGHT) and key_up(KEY_G) and key_up(KEY_LSHIFT) and key_up(KEY_RSHIFT) and movetimer.elapsed>=movetime)
{
if(keyrowhold==1 and moveable==true and doormove==false  and psdoormove==false)
{
move_right();
movetimer.restart();
}
else if(keyrowhold==1 and moveable==false and sitting==true)
{
if(charshakesound==1) p.play_stationary(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*rock*"),false);
movetimer.restart();
}
}
if(key_down(KEY_UP) and key_up(KEY_G) and key_up(KEY_LSHIFT) and key_up(KEY_RSHIFT) and movetimer.elapsed>=movetime)
{
if(keyrowhold==1 and moveable==true and doormove==false  and psdoormove==false)
{
move_up();
movetimer.restart();
}
else if(keyrowhold==1 and moveable==false and sitting==true)
{
if(charshakesound==1) p.play_stationary(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*rock*"),false);
movetimer.restart();
}
}
if(key_down(KEY_DOWN) and key_up(KEY_G) and key_up(KEY_LSHIFT) and key_up(KEY_RSHIFT) and movetimer.elapsed>=movetime)
{
if(keyrowhold==1 and moveable==true and doormove==false  and psdoormove==false)
{
move_down();
movetimer.restart();
}
else if(keyrowhold==1 and moveable==false and sitting==true)
{
if(charshakesound==1) p.play_stationary(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*rock*"),false);
movetimer.restart();
}
}
if(key_pressed(KEY_LEFT) and key_up(KEY_G) and key_up(KEY_LSHIFT) and key_up(KEY_RSHIFT))
{
if(keyrowhold==0 and moveable==true and doormove==false  and psdoormove==false)
{
step_left();
}
else if(keyrowhold==0 and moveable==false and sitting==true)
{
if(charshakesound==1) p.play_stationary(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*rock*"),false);
}
}
if(key_pressed(KEY_RIGHT) and key_up(KEY_G) and key_up(KEY_LSHIFT) and key_up(KEY_RSHIFT))
{
if(keyrowhold==0 and moveable==true and doormove==false  and psdoormove==false)
{
step_right();
}
else if(keyrowhold==0 and moveable==false and sitting==true)
{
if(charshakesound==1) p.play_stationary(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*rock*"),false);
}
}
if(key_pressed(KEY_UP) and key_up(KEY_G) and key_up(KEY_LSHIFT) and key_up(KEY_RSHIFT))
{
if(keyrowhold==0 and moveable==true and doormove==false  and psdoormove==false)
{
step_up();
}
else if(keyrowhold==0 and moveable==false and sitting==true)
{
if(charshakesound==1) p.play_stationary(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*rock*"),false);
}
}
if(key_pressed(KEY_DOWN) and key_up(KEY_G) and key_up(KEY_LSHIFT) and key_up(KEY_RSHIFT))
{
if(keyrowhold==0 and moveable==true and doormove==false  and psdoormove==false)
{
step_down();
}
else if(keyrowhold==0 and moveable==false and sitting==true)
{
if(charshakesound==1) p.play_stationary(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*rock*"),false);
}
}
if(key_repeating(KEY_D) and modspeed!=20)
{
if(keyrowhold==0)
{
speak("You must enable auto walking in order to increase the moving speed.");
}
else if(speedable==true)
{
p.play_stationary("speed.ogg",false);
modspeed+=1;
speak("speed"+modspeed);
}
}
if(key_repeating(KEY_A) and modspeed!=1)
{
if(keyrowhold==0)
{
speak("You must enable auto walking in order to decrease the moving speed.");
}
else if(speedable==true)
{
p.play_stationary("speed.ogg",false);
modspeed-=1;
speak("speed"+modspeed);
}
}
if(key_pressed(KEY_F))
{
if(modspeed==5)
{
speak("moving speed is already reset");
}
else if(modspeed<=20)
{
modspeed=5;
speak("moving speed reset");
}
}
if(key_repeating(KEY_X))
{
if(spokenswitch==1)
{
if(keyrowhold==1 and speedable==true)
{
if(switchsound==1) p.play_stationary("switchoff.ogg",false);
speak("auto walking disabled");
keyrowhold=0;
speedable=false;
}
else if(keyrowhold==0 and speedable==false)
{
if(switchsound==1) p.play_stationary("switchon.ogg",false);
speak("auto walking enabled");
keyrowhold=1;
speedable=true;
}
else if(spokenswitch==0)
{
if(keyrowhold==1 and speedable==true)
{
if(switchsound==1) p.play_stationary("switchoff.ogg",false);
keyrowhold=0;
speedable=false;
}
else if(keyrowhold==0 and speedable==false)
{
if(switchsound==1) p.play_stationary("switchon.ogg",false);
keyrowhold=1;
speedable=true;
}
}
}
}
if(key_repeating(KEY_T))
{
if(sittable==true and sitting==false)
{
sit_down();
}
else if(sittable==true and sitting==true)
{
stand_up();
}
}
if(key_pressed(KEY_C))
{
speakcoordinates();
}
if(key_pressed(KEY_Q) and building==true)
{
if(get_zone_at(me.x, me.y)!="")
{
string locate=get_zone_at(me.x,me.y);
speak("Current location"+","+locate);
}
else
{
speak("Current location, unknown area.");
}
}
if(key_repeating(KEY_J) and telable==true)
{
if(spokentel==1)
{
me.x=random(0,maxx);
if(chartelsound==1) p.play_stationary(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*xtel*"),false);
speak("moved to"+me.x+",;"+me.y);
}
else if(spokentel==0)
{
me.x=random(0,maxx);
if(chartelsound==1) p.play_stationary(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*xtel*"),false);
}
}
if(key_repeating(KEY_K) and telable==true)
{
if(spokentel==1)
{
me.y=random(1,maxy);
if(chartelsound2==1) p.play_stationary(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*ytel*"),false);
speak("moved to"+me.x+",;"+me.y);
}
else if(spokentel==0)
{
me.y=random(1,maxy);
if(chartelsound2==1) p.play_stationary(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*ytel*"),false);
}
}
if(key_repeating(KEY_L) and telable==true)
{
if(spokentel==1)
{
me.x=random(0,maxx);
me.y=random(1,maxy);
if(chartelsound3==1) p.play_stationary(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*telxy*"),false);
speak("moved to"+me.x+",;"+me.y);
}
else if(spokentel==0)
{
me.x=random(0,maxx);
me.y=random(1,maxy);
if(chartelsound3==1) p.play_stationary(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*telxy*"),false);
}
}
if(key_pressed(KEY_F1) and jumpheight!=1)
{
jumpheight-=1;
speak("jump height decreased to"+jumpheight+"squares");
}
if(key_pressed(KEY_F2) and jumpheight!=20)
{
jumpheight+=1;
speak("jump height increased to"+jumpheight+"squares");
}
if(key_pressed(KEY_F3))
{
if(jumpheight==5)
{
speak("jump hight is already reset");
}
else if(jumpheight<=20)
{
jumpheight=5;
speak("jump hight reset");
}
}
if (key_pressed(KEY_F4) and maxx!=10 and building==false)
{
maxx-=10;
speak("max x position decreased to"+maxx+"tiles");
}
if(key_pressed(KEY_F5) and maxx!=1000 and building==false)
{
maxx+=10;
speak("max x position increased to"+maxx+"tiles");
}
if(key_pressed(KEY_F6) and maxy!=10 and building==false)
{
maxy-=10;
speak("max y position decreased to"+maxy+"tiles");
}
if(key_pressed(KEY_F7) and maxy!=1000 and building==false)
{
maxy+=10;
speak("max y position increased to"+maxy+"tiles");
}
if(key_pressed(KEY_COMMA))
{
speak("Your maximum x position is"+maxx+"tiles");
}
if(key_pressed(KEY_PERIOD))
{
speak("Your maximum y position is"+maxy+"tiles");
}
if(key_down(KEY_SPACE) and key_up(KEY_G)  and key_up(KEY_LSHIFT) and key_up(KEY_RSHIFT) and autojump==1 and jumping==0 and jumpable==true and falling==false and doormove==false  and psdoormove==false)
{
if(charjumpsound==1) p.play_stationary(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*rise*"),false);
if(charjumpsound2==1) p.play_stationary(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*jump*"),false);
ty1=me.y;
ty2=me.y+jumpheight;
jumping=1;
ascending=true;
}
if (jumping==1)
{
for(uint i=0; i<safezones.length(); i++)
{
bool currently_in_zone =safezones[i].minx <= me.x && safezones[i].maxx >= me.x && safezones[i].miny <= me.y && safezones[i].maxy >= me.y;
if (currently_in_zone && !safezones[i].player_in_zone)
{
safezones[i].safesound=safepool.play_stationary(find_sound("sounds/"+soundpack+"/objects/safe zones/"+safezones[i].safetype+"/*in*"),false);
safezones[i].player_in_zone = true;
}
else if (!currently_in_zone && safezones[i].player_in_zone)
{
safezones[i].safesound=safepool.play_stationary(find_sound("sounds/"+soundpack+"/objects/safe zones/"+safezones[i].safetype+"/*out*"),false);
safezones[i].player_in_zone = false;
}
}
if (atapex==true and jumptimer.elapsed>=apextime)
{
jumptimer.restart();
atapex=false;
}
if (ascending==false and jumptimer.elapsed>=jumptime2 and atapex==false)
{
jumptimer.restart();
me.y-=1;
checkforplatforms();
if (me.y<=ty1)
{
me.y=ty1;
jumping=0;
}
}
if (ascending==true and jumptimer.elapsed>=jumptime)
{
jumptimer.restart();
me.y+=1;
checkforwalls();
if (me.y>=ty2)
{
ascending=false;
jumptimer.restart();
atapex=true;
}
}
}
if(key_pressed(KEY_SPACE) and key_up(KEY_G)  and key_up(KEY_LSHIFT) and key_up(KEY_RSHIFT) and autojump==0 and jumping==0 and jumpable==true and falling==false and doormove==false  and psdoormove==false)
{
if(charjumpsound==1) p.play_stationary(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*rise*"),false);
if(charjumpsound2==1) p.play_stationary(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*jump*"),false);
ty1=me.y;
ty2=me.y+jumpheight;
jumping=1;
ascending=true;
}
if (jumping==1)
{
for(uint i=0; i<safezones.length(); i++)
{
bool currently_in_zone =safezones[i].minx <= me.x && safezones[i].maxx >= me.x && safezones[i].miny <= me.y && safezones[i].maxy >= me.y;
if (currently_in_zone && !safezones[i].player_in_zone)
{
safezones[i].safesound=safepool.play_stationary(find_sound("sounds/"+soundpack+"/objects/safe zones/"+safezones[i].safetype+"/*in*"),false);
safezones[i].player_in_zone = true;
}
else if (!currently_in_zone && safezones[i].player_in_zone)
{
safezones[i].safesound=safepool.play_stationary(find_sound("sounds/"+soundpack+"/objects/safe zones/"+safezones[i].safetype+"/*out*"),false);
safezones[i].player_in_zone = false;
}
}
if (atapex==true and jumptimer.elapsed>=apextime)
{
jumptimer.restart();
atapex=false;
}
if (ascending==false and jumptimer.elapsed>=jumptime2 and atapex==false)
{
jumptimer.restart();
me.y-=1;
checkforplatforms();
if (me.y<=ty1)
{
me.y=ty1;
jumping=0;
}
}
if (ascending==true and jumptimer.elapsed>=jumptime)
{
jumptimer.restart();
me.y+=1;
checkforwalls();
if (me.y>=ty2)
{
ascending=false;
jumptimer.restart();
atapex=true;
}
}
}
if(key_pressed(KEY_Z))
{
if(melee==false and weapontype=="archery")
{
speak(loadedammo+" out of "+maxammo+" ammo loaded, and "+ammo+" ammo in reserve");
}
if(melee==false and weapontype=="artillery")
{
speak(loadedammo+" out of "+maxammo+" ammo loaded, and "+ammo+" ammo in reserve");
}
if(melee==false and weapontype=="explosive")
{
speak(loadedammo+" out of "+maxammo+" ammo loaded, and "+ammo+" ammo in reserve");
}
if(melee==true and weapontype=="melee")
{
speak("This weapon does not take any ammo.");
}
}
if(key_repeating(KEY_R))
{
if(melee==true and weapontype=="melee")
{
speak("This weapon does not take any ammo.");
}
else
{
if(melee==false and loadedammo>=1)
{
speak("This weapon is already loaded with ammo.");
}
else if(melee==false and loadedammo<=0)
{
reload_weapon();
}
}
}
if(key_pressed(KEY_U))
{
speak("You're currently playing "+mapname+" map.");
}
if(key_pressed(KEY_Y))
{
speak("You've been playing for a total of;"+timeelapsed.m()+"minutes,"+timeelapsed.s()+"seconds");
}
if(key_pressed(KEY_H))
{
if(shieldon==1)
{
speak("Your shield must be removed to view the player's health status.");
}
else if(shieldon==0)
{
if(healthspeech==1 and lifecard>=2)
{
speak(health+"health,"+lifecard+"lives");
}
if(healthspeech==2 and lifecard>=2)
{
speak(health+"of"+maxhealth+"health,"+lifecard+"lives");
}
if(healthspeech==3 and lifecard>=2)
{
speak(round(health/maxhealth*100,2)+"percent health remaining,"+lifecard+"lives");
}
if(healthspeech==4 and lifecard>=2)
{
speak(round(health/maxhealth*100,2)+"percent,"+health+"of"+maxhealth+"health,"+lifecard+"lives");
}
if(healthspeech==1 and lifecard<=1)
{
speak(health+"health,"+lifecard+"life");
}
if(healthspeech==2 and lifecard<=1)
{
speak(health+"of"+maxhealth+"health,"+lifecard+"life");
}
if(healthspeech==3 and lifecard<=1)
{
speak(round(health/maxhealth*100,2)+"percent health remaining,"+lifecard+"life");
}
if(healthspeech==4 and lifecard<=1)
{
speak(round(health/maxhealth*100,2)+"percent,"+health+"of"+maxhealth+"health,"+lifecard+"life");
}
}
}
if(key_pressed(KEY_M))
{
if(shieldon==0)
{
speak("Your shield must be razed or worn to view it's status.");
}
else if(shieldon==1)
{
speak("shield strength,"+round(shieldstrength/maxshieldstrength*100,2)+"percent");
}
}
if(control_is_down())
{
if(useitems==false)
{
drawable=true;
auto_fire_weapon();
}
else if(useitems==true)
{
drawable=false;
auto_use_item();
}
}
if(key_pressed(KEY_LCONTROL) or key_pressed(KEY_RCONTROL))
{
if(useitems==false)
{
drawable=true;
manule_fire_weapon();
}
else if(useitems==true)
{
drawable=false;
manule_use_item();
}
}
if(key_repeating(KEY_E))
{
if(objinf==0)
{
if(gamemode==1 and building==false) speak("there are;"+animals.length()+"animals spawned on the map.");
if(gamemode==2 and building==false) speak("there are;"+enemies.length()+"enemies spawned on the map.");
if(gamemode==3 and building==false) speak("there are;"+projectiles.length()+"projectiles spawned on the map.");
if(gamemode==4 and building==false) speak("there are;"+robots.length()+"robots spawned on the map.");
if(gamemode==5 and building==false) speak("there are;"+zombies.length()+"zombies spawned on the map.");
if(gamemode==6 and building==false) speak("there are;"+animals.length()+amtype+";"+"spawned on the map.");
if(gamemode==7 and building==false) speak("there are;"+enemies.length()+emtype+";"+"spawned on the map.");
if(gamemode==8 and building==false) speak("there are;"+projectiles.length()+potype+";"+"spawned on the map.");
if(gamemode==9 and building==false) speak("there are;"+robots.length()+rotype+";"+"spawned on the map.");
if(gamemode==10 and building==false) speak("there are;"+zombies.length()+zotype+";"+"spawned on the map.");
}
else if(objinf==1)
{
if(animals.length()==0 and bosses.length()==0 and dest_walls.length()==0 and doors.length()==0 and psdoors.length()==0 and enemies.length()==0 and helpers.length()==0 and projectiles.length()==0 and robots.length()==0 and spikes.length()==0  and turrets.length()==0 and vehicles.length()==0 and zombies.length()==0)
{
speak("there are no objects on the field to view.");
}
else
{
pause_pools();
infomenu();
}
}
}
if(key_pressed(KEY_N))
{
speak("You have killed a total of"+kills+"entidies.");
}
if(key_repeating(KEY_P))
{
if(pausem==0)
{
if(paused==0)
{
p.play_stationary("pause.ogg",false);
pause_game();
}
else if(paused==1)
{
p.play_stationary("resume.ogg",false);
resume_game();
}
}
else if(pausem==1)
{
p.play_stationary("pause.ogg",false);
if(autosave==1) writedata();
pause_game();
pausemenu();
}
}
if(key_pressed(KEY_V))
{
pause_pools();
pointsmenu();
}
if(key_repeating(KEY_BACKSLASH) and healable==true)
{
if(shieldon==1)
{
speak("Your shield must be removed to restore the player's health.");
}
else if(shieldon==0 and hprestoration==0 and health>=maxhealth)
{
speak("You're already at maximum health.");
}
else if(health<=maxhealth and hprestoration==1)
{
p.destroy_sound(autoslot);
if(charhealsound3==1) p.play_stationary(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*healstop*"),false);
hprestoration=0;
}
else
{
if(charhealsound2==1) p.play_stationary(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*healstart*"),false);
if(charhealsound==1) autoslot=p.play_stationary(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*healing*"),true);
hprestoration=1;
}
}
if(key_repeating(KEY_RBRACKET) and healable==true)
{
if(shieldon==0)
{
speak("Your shield must be razed or worn to restore it's strength.");
}
else if(shieldon==1 and shieldstrength>=maxshieldstrength)
{
speak("Your shield is already at maximum strength.");
}
else if(shieldon==1 and shieldstrength<=maxshieldstrength)
{
if(sprestoration==1)
{
p.destroy_sound(autoslot);
if(charhealsound3==1) p.play_stationary(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*healstop*"),false);
sprestoration=0;
}
else
{
if(charhealsound2==1) p.play_stationary(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*healstart*"),false);
if(charhealsound==1) autoslot=p.play_stationary(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*healing*"),true);
sprestoration=1;
}
}
}
if(shieldmode == 0)
{
if(key_repeating(KEY_B))
{
if(shieldtype == "none")
{
speak("You must draw a shield before razing or wearing it.");
}
else if(shieldon == 0)
{
p.destroy_sound(shieldwearslot);
if (shieldwearsound == 1) shieldwearslot = p.play_stationary_extended(find_sound("sounds/" + soundpack + "/equipments/shields/" + shieldtype + "/*wear*"), false, 0, 0, shieldvolume, shieldpitch, false);
if (shieldloopsound == 1) shieldloop = p.play_stationary_extended(find_sound("sounds/" + soundpack + "/equipments/shields/" + shieldtype + "/*loop*"), true, 0, 0, shieldvolume, shieldpitch, false);
shieldon = 1;
}
else
{
p.destroy_sound(shieldloop);
p.destroy_sound(shieldremoveslot);
if (shieldremovesound == 1) shieldremoveslot = p.play_stationary_extended(find_sound("sounds/" + soundpack + "/equipments/shields/" + shieldtype + "/*remove*"), false, 0, 0, shieldvolume, shieldpitch, false);
shieldon = 0;
}
}
}
else if(shieldmode == 1)
{
if(key_repeating(KEY_B))
{
if(shieldtype == "none")
{
speak("You must draw a shield before razing or wearing it.");
}
else if(shieldon == 0)
{
p.destroy_sound(shieldwearslot);
if (shieldwearsound == 1) shieldwearslot = p.play_stationary_extended(find_sound("sounds/" + soundpack + "/equipments/shields/" + shieldtype + "/*wear*"), false, 0, 0, shieldvolume, shieldpitch, false);
if (shieldloopsound == 1) shieldloop = p.play_stationary_extended(find_sound("sounds/" + soundpack + "/equipments/shields/" + shieldtype + "/*loop*"), true, 0, 0, shieldvolume, shieldpitch, false);
fireable=false;
jumpable=false;
moveable=false;
shieldon = 1;
}
}
else if (key_released(KEY_B))
{
if (shieldon == 1)
{
p.destroy_sound(shieldloop);
p.destroy_sound(shieldremoveslot);
if (shieldremovesound == 1) shieldremoveslot = p.play_stationary_extended(find_sound("sounds/" + soundpack + "/equipments/shields/" + shieldtype + "/*remove*"), false, 0, 0, shieldvolume, shieldpitch, false);
fireable=true;
jumpable=true;
moveable=true;
shieldon = 0;
}
}
}
}

void game(bool is_building)
{
building=is_building;
gametimer.force(gametime);
if(building==false and musmode==1) spawn_musicsource(0, maxx*10, 0, maxy*10, mustyp, volume, pitch);
form.reset();
form.create_window("", false, false);
int controlgame=form.create_keyboard_area("");
form.focus_silently(controlgame);
while(true)
{
form.monitor();
wait(5);
update_ambsources(me.x,me.y);
update_musicambs(me.x,me.y);
update_sound_pools();
checkdeath();
checkloc();
checkpassages();
checkpspassages();
calandercheck();
clockcheck();
doorcheck();
fallcheck();
hazardcheck();
mhazardcheck();
mplatcheck();
psdoorcheck();
signcheck();
spawncheck();
stairscheck();
textcheck();
travelcheck();
dest_wallcheck();
animalloop();
animalzoneloop();
beltloop();
bossloop();
bfloop();
bulletloop();
bombloop();
bombzoneloop();
cploop();
dlgloop();
doorloop();
eneloop();
enemiezoneloop();
forceloop();
healzoneloop();
helperloop();
liftloop();
mineloop();
menuzoneloop();
objloop();
objzoneloop();
psdoorloop();
projloop();
projzoneloop();
revfxloop();
robloop();
robotzoneloop();
spikeloop();
telloop();
timebombloop();
timedmrcloop();
timedsrcloop();
timedtxtloop();
turretloop();
vplatloop();
vehloop();
zombloop();
zombiezoneloop();
if(amsptimer.elapsed>=amsptime and animals.length()<aninum and gamemode==1 and building==false and spawnable==true)
{
string[] animaltype=find_directories("sounds/"+soundpack+"/npc/normal/animals/*");
spawn_animal(random(0, maxx), 0, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), 1, 1*level, animaltype[random(0,animaltype.length()-1)], true, true, random_bool(), random_bool());
amsptimer.restart();
}
if(emsptimer.elapsed>=emsptime and enemies.length()<eninum and gamemode==2 and building==false and spawnable==true)
{
string[] enemietype=find_directories("sounds/"+soundpack+"/npc/normal/enemies/*");
spawn_enemie(random(0, maxx), 0, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), 1, 1*level, enemietype[random(0,enemietype.length()-1)], true, true, random_bool(), random_bool());
emsptimer.restart();
}
if(prosptimer.elapsed>=prosptime and projectiles.length()<projnum and gamemode==3 and building==false and spawnable==true)
{
string[] projtype=find_directories("sounds/"+soundpack+"/npc/normal/projectiles/*");
spawn_projectile(random(0, maxx), 0, random(0, 1), 1*xp+1, 1*xp+1, 1, 1*xp+1, random(50, 500), 1, 1*level, projtype[random(0,projtype.length()-1)], true, true);
prosptimer.restart();
}
if(robsptimer.elapsed>=robsptime and robots.length()<robnum and gamemode==4 and building==false and spawnable==true)
{
string[] robottype=find_directories("sounds/"+soundpack+"/npc/normal/robots/*");
spawn_robot(random(0, maxx), 0, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), 1, 1*level, robottype[random(0,robottype.length()-1)], true, true, random_bool(), random_bool());
robsptimer.restart();
}
if(zombsptimer.elapsed>=zombsptime and zombies.length()<zombnum and gamemode==5 and building==false and spawnable==true)
{
string[] zombietype=find_directories("sounds/"+soundpack+"/npc/normal/zombies/*");
spawn_zombie(random(0, maxx), 0, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), 1, 1*level, zombietype[random(0,zombietype.length()-1)], true, true, random_bool(), random_bool());
zombsptimer.restart();
}
if(amsptimer.elapsed>=amsptime and animals.length()<aninum and gamemode==6 and building==false and spawnable==true and  amtype!="")
{
string[] animaltype=find_directories("sounds/"+soundpack+"/npc/normal/animals/*");
if(amtype!="" and animaltype.find(amtype)>-1)
{
spawn_animal(random(0, maxx), 0, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), 1, 1*level, amtype, true, true, random_bool(), random_bool());
amsptimer.restart();
}
}
if(emsptimer.elapsed>=emsptime and enemies.length()<eninum and gamemode==7 and building==false and spawnable==true and  emtype!="")
{
string[] enemietype=find_directories("sounds/"+soundpack+"/npc/normal/enemies/*");
if(emtype!="" and enemietype.find(emtype)>-1)
{
spawn_enemie(random(0, maxx), 0, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), 1, 1*level, emtype, true, true, random_bool(), random_bool());
emsptimer.restart();
}
}
if(prosptimer.elapsed>=prosptime and projectiles.length()<projnum and gamemode==8 and building==false and spawnable==true and  potype!="")
{
string[] projtype=find_directories("sounds/"+soundpack+"/npc/normal/projectiles/*");
if(potype!="" and projtype.find(potype)>-1)
{
spawn_projectile(random(0, maxx), 0, random(0, 1), 1*xp+1, 1*xp+1, 1, 1*xp+1, random(50, 500), 1, 1*level, potype, true, true);
prosptimer.restart();
}
}
if(robsptimer.elapsed>=robsptime and robots.length()<robnum and gamemode==9 and building==false and spawnable==true and  rotype!="")
{
string[] robottype=find_directories("sounds/"+soundpack+"/npc/normal/robots/*");
if(rotype!="" and robottype.find(rotype)>-1)
{
spawn_robot(random(0, maxx), 0, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), 1, 1*level, rotype, true, true, random_bool(), random_bool());
robsptimer.restart();
}
}
if(zombsptimer.elapsed>=zombsptime and zombies.length()<zombnum and gamemode==10 and building==false and spawnable==true and  zotype!="")
{
string[] zombietype=find_directories("sounds/"+soundpack+"/npc/normal/zombies/*");
if(zotype!="" and zombietype.find(zotype)>-1)
{
spawn_zombie(random(0, maxx), 0, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), 1, 1*level, zotype, true, true, random_bool(), random_bool());
zombsptimer.restart();
}
}
if(heartsound==1 and hearttimer.elapsed>=hearttime)
{
if(hearttype==1)
{
if(heartsound==1) heartslot=p.play_stationary("heartbeat1.wav", false);
hearttimer.restart();
}
}
if(heartsound==1 and hearttimer.elapsed>=hearttime)
{
if(hearttype==2)
{
if(heartsound==1) heartslot=p.play_stationary("heartbeat2.wav",false);
hearttimer.restart();
}
}
if(heartsound==1 and hearttimer.elapsed>=hearttime)
{
if(hearttype==3)
{
if(heartsound==1) heartslot=p.play_stationary("heartbeat3.wav",false);
hearttimer.restart();
}
}
if(heartsound==1 and hearttimer.elapsed>=hearttime)
{
if(hearttype==4)
{
if(heartsound==1) heartslot=p.play_stationary("hartmon4.ogg",false);
hearttimer.restart();
}
}
if(heartsound==1 and hearttimer.elapsed>=hearttime)
{
if(hearttype==5)
{
if(heartsound==1) heartslot=p.play_stationary("hartmon5.ogg",false);
hearttimer.restart();
}
}
if (jumping==1)
{
movetime=airtime;
}
else if(alt_is_down())
{
movetime=runtime;
}
else
{
movetime=walktime;
}
if(modspeed>=1)
{
airtime=250/modspeed+shieldweight+wepweight;
camtime=250/modspeed+shieldweight+wepweight;
falltime=250/modspeed-shieldweight-wepweight;
runtime=500/modspeed+shieldweight+wepweight;
walktime=1000/modspeed+shieldweight+wepweight;
}
if(xp>=xprequiered)
{
xprequiered=(levmod*(level*(level*4)));
if(charlevsound==1) p.play_stationary(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*lev*"),false);
if(gamemode==1 and building==false) aninum+=1;
if(gamemode==2 and building==false) eninum+=1;
if(gamemode==3 and building==false) projnum+=1;
if(gamemode==4 and building==false) robnum+=1;
if(gamemode==5 and building==false) zombnum+=1;
if(gamemode==6 and building==false) aninum+=1;
if(gamemode==7 and building==false) eninum+=1;
if(gamemode==8 and building==false) projnum+=1;
if(gamemode==9 and building==false) robnum+=1;
if(gamemode==10 and building==false) zombnum+=1;
level+=1;
points+=100*level*levmod-100;
}
if(health<=health and hprestoretimer.elapsed>=hprestoretime and healable==true)
{
if(hprestoration==1)
{
health+=maxhealth/4;
hearttime+=maxhealth/4;
if(charhealsound3==1 and health>=maxhealth) p.play_stationary(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*healstop*"),false);
hprestoretimer.restart();
}
}
if(shieldstrength<=shieldstrength and sprestoretimer.elapsed>=sprestoretime and healable==true)
{
if(sprestoration==1)
{
shieldstrength+=maxshieldstrength/4;
if(charhealsound3==1 and shieldstrength>=maxshieldstrength) p.play_stationary(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*healstop*"),false);
sprestoretimer.restart();
}
}
if(shieldstrength<=0)
{
p.destroy_sound(shieldloop);
p.destroy_sound(shieldslot);
shieldslot=p.play_stationary_extended(find_sound("sounds/"+soundpack+"/equipments/shields/"+shieldtype+"/*break*"),false,0,0,shieldvolume,shieldpitch,false);
shieldstrength=maxshieldstrength;
drawnshield=false;
fireable=true;
jumpable=true;
moveable=true;
shieldon=0;
shieldweight=1;
shieldtype="none";
}
if(health<=0)
{
if(lifecard>=2)
{
if(charlifesound==1) p.play_stationary(find_sound("sounds/"+soundpack+"/characters/"+chartype+"/*life*"),false);
lifecard-=1;
health=maxhealth;
hearttime=maxhealth;
}
}
if(animals.length()>=50 or enemies.length()>=50 or projectiles.length()>=50 or robots.length()>=50 or zombies.length()>=50)
{
aninum=50;
eninum=50;
projnum=50;
robnum=50;
zombnum=50;
}
if(cam.x<=minx)
{
cam.x=minx;
}
if(cam.x>=maxx)
{
cam.x=maxx;
}
if(cam.y<=miny)
{
cam.y=miny;
}
if(cam.y>=maxy)
{
cam.y=maxy;
}
if(me.x<=minx)
{
me.x=minx;
}
if(me.x>=maxx)
{
me.x=maxx;
}
if(me.y<=miny)
{
me.y=miny;
}
if(me.y>=maxy)
{
me.y=maxy;
}
if(health<=0)
{
health=0;
hearttime=0;
}
if(health>=maxhealth)
{
health=maxhealth;
hearttime=maxhealth;
}
if(hearttime<=100)
{
hearttime=100;
}
if(shieldstrength<=0)
{
shieldstrength=0;
}
if(shieldstrength>=maxshieldstrength)
{
shieldstrength=maxshieldstrength;
}
if(attack<=0)
{
attack=0;
}
if(defence<=0)
{
defence=0;
}
if(lifecard<=1)
{
lifecard=1;
}
if(points<=0)
{
points=0;
}
if(shielddefence<=0)
{
shielddefence=0;
}
if(weprange<=0)
{
weprange=0;
}
if(weprange2<=0)
{
weprange2=0;
}
if(health>=maxhealth and hprestoration==1)
{
hprestoration=0;
p.destroy_sound(autoslot);
health=maxhealth;
hearttime=maxhealth;
}
if(shieldstrength>=maxshieldstrength and sprestoration==1)
{
sprestoration=0;
p.destroy_sound(autoslot);
shieldstrength=maxshieldstrength;
}
if(form.get_current_focus()==controlgame)
{
checkwepslots();
game_input();
}
if(key_repeating(KEY_ESCAPE) and quittable==true)
{
if(gamxit==0)
{
if(fademode==0) fade_multi_pool(0);
if(fademode==1) fade_multi_pool(1);
me.x=0;
me.y=0;
if(building==true) clearmap();
if(building==true) destroymap();
if(building==true) mainmenu();
if(building==false) destroygame();
if(building==false) mainmenu();
}
else if(gamxit==1)
{
setupmenu();
m.wrap_sound="none.ogg";
m.click_sound="menu1.ogg";
m.enter_sound="menu2.ogg";
m.open_sound="menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres=m.run("Are you sure you want to exit?",true);
if(mres==0)
{
speak("canceled");
}
if(mres==1)
{
if(fademode==0) fade_multi_pool(0);
if(fademode==1) fade_multi_pool(1);
me.x=0;
me.y=0;
if(building==true) clearmap();
if(building==true) destroymap();
if(building==true) mainmenu();
if(building==false) destroygame();
if(building==false) mainmenu();
}
if(mres==2)
{
speak("canceled");
}
}
}
}
}
