animalzone@[]animalzones(0);
class animalzone
{
double minx, maxx;
int amy;
int spawntime;
string animaltype;
timer spawntimer;
animalzone(double mx,double mx2,int ay,int sp,string at)
{
minx=mx;
maxx=mx2;
amy=ay;
spawntime=sp;
animaltype=at;
}
}
void animalzoneloop()
{
for(uint i=0; i<animalzones.length(); i++)
{
if(animalzones[i].minx<=me.x and animalzones[i].maxx>=me.x and animalzones[i].amy==me.y and animalzones[i].spawntimer.elapsed>=animalzones[i].spawntime)
{
string[] animaltype=find_directories("sounds/"+soundpack+"/npc/normal/animals/*");
string amtype = animalzones[i].animaltype;
if(amtype=="random" && animaltype.length()>0)
{
amtype=animaltype[random(0,animaltype.length()-1)];
}
spawn_animal(random(animalzones[i].minx, animalzones[i].maxx), animalzones[i].amy, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), 1, 1*level, amtype, true, true, random_bool(), random_bool());
animalzones[i].spawntimer.restart();
}
}
}
void spawn_animalzone(double x1,double x2,int y,int sp,string type)
{
animalzone az1(x1,x2,y,sp,type);
animalzones.insert_last(az1);
}
void destroy_all_animalzones()
{
animalzones.resize(0);
}

humanzone@[]humanzones(0);
class humanzone
{
double minx, maxx;
int humy;
int spawntime;
string humantype;
timer spawntimer;
humanzone(double mx,double mx2,int huy,int sp,string et)
{
minx=mx;
maxx=mx2;
humy=huy;
spawntime=sp;
humantype=et;
}
}
void humanzoneloop()
{
for(uint i=0; i<humanzones.length(); i++)
{
if(humanzones[i].minx<=me.x and humanzones[i].maxx>=me.x and humanzones[i].humy==me.y and humanzones[i].spawntimer.elapsed>=humanzones[i].spawntime)
{
string[] humantype=find_directories("sounds/"+soundpack+"/npc/normal/humans/*");
string humtype = humanzones[i].humantype;
if(humtype=="random" && humantype.length()>0)
{
humtype=humantype[random(0,humantype.length()-1)];
}
spawn_human(random(humanzones[i].minx, humanzones[i].maxx), humanzones[i].humy, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), 1, 1*level, humtype, true, true, random_bool(), random_bool());
humanzones[i].spawntimer.restart();
}
}
}
void spawn_humanzone(double x1,double x2,int y,int sp,string type)
{
humanzone huz1(x1,x2,y,sp,type);
humanzones.insert_last(huz1);
}
void destroy_all_humanzones()
{
humanzones.resize(0);
}

projzone@[]projzones(0);
class projzone
{
double minx, maxx;
int proy;
int spawntime;
string projtype;
timer spawntimer;
projzone(double mx,double mx2,int py,int sp,string pt)
{
minx=mx;
maxx=mx2;
proy=py;
spawntime=sp;
projtype=pt;
}
}
void projzoneloop()
{
for(uint i=0; i<projzones.length(); i++)
{
if(projzones[i].minx<=me.x and projzones[i].maxx>=me.x and projzones[i].proy==me.y and projzones[i].spawntimer.elapsed>=projzones[i].spawntime)
{
string[] projtype=find_directories("sounds/"+soundpack+"/npc/normal/projectiles/*");
string potype=projzones[i].projtype;
if(potype=="random" && projtype.length()>0)
{
potype=projtype[random(0,projtype.length()-1)];
}
spawn_projectile(random(projzones[i].minx, projzones[i].maxx), projzones[i].proy, random(0, 1), 1*xp+1, 1*xp+1, 1, 1*xp+1, random(50, 500), 1, 1*level, potype, true, true);
projzones[i].spawntimer.restart();
}
}
}
void spawn_projzone(double x1,double x2,int y,int sp,string type)
{
projzone pz1(x1,x2,y,sp,type);
projzones.insert_last(pz1);
}
void destroy_all_projzones()
{
projzones.resize(0);
}

robotzone@[]robotzones(0);
class robotzone
{
double minx, maxx;
int roby;
int spawntime;
string robtype;
timer spawntimer;
robotzone(double mx,double mx2,int ry,int sp,string rt)
{
minx=mx;
maxx=mx2;
roby=ry;
spawntime=sp;
robtype=rt;
}
}
void robotzoneloop()
{
for(uint i=0; i<robotzones.length(); i++)
{
if(robotzones[i].minx<=me.x and robotzones[i].maxx>=me.x and robotzones[i].roby==me.y and robotzones[i].spawntimer.elapsed>=robotzones[i].spawntime)
{
string[] robtype=find_directories("sounds/"+soundpack+"/npc/normal/robots/*");
string rotype = robotzones[i].robtype;
if(rotype=="random" && robtype.length()>0)
{
rotype=robtype[random(0,robtype.length()-1)];
}
spawn_robot(random(robotzones[i].minx, robotzones[i].maxx), robotzones[i].roby, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), 1, 1*level, rotype, true, true, random_bool(), random_bool());
robotzones[i].spawntimer.restart();
}
}
}
void spawn_robotzone(double x1,double x2,int y,int sp,string type)
{
robotzone rz1(x1,x2,y,sp,type);
robotzones.insert_last(rz1);
}
void destroy_all_robotzones()
{
robotzones.resize(0);
}

zombiezone@[]zombiezones(0);
class zombiezone
{
double minx, maxx;
int zomby;
int spawntime;
string zombtype;
timer spawntimer;
zombiezone(double mx,double mx2,int zy,int sp,string zt)
{
minx=mx;
maxx=mx2;
zomby=zy;
spawntime=sp;
zombtype=zt;
}
}
void zombiezoneloop()
{
for(uint i=0; i<zombiezones.length(); i++)
{
if(zombiezones[i].minx<=me.x and zombiezones[i].maxx>=me.x and zombiezones[i].zomby==me.y and zombiezones[i].spawntimer.elapsed>=zombiezones[i].spawntime)
{
string[] zombtype=find_directories("sounds/"+soundpack+"/npc/normal/zombies/*");
string zotype = zombiezones[i].zombtype;
if(zotype=="random" && zombtype.length()>0)
{
zotype=zombtype[random(0,zombtype.length()-1)];
}
spawn_zombie(random(zombiezones[i].minx, zombiezones[i].maxx), zombiezones[i].zomby, 0, 0, maxx, maxy, 1*xp+1, 1*xp+1, 1, 1*xp+1, random(100, 1000), random(100, 1000), 1, 1*level, zotype, true, true, random_bool(), random_bool());
zombiezones[i].spawntimer.restart();
}
}
}
void spawn_zombiezone(double x1,double x2,int y,int sp,string type)
{
zombiezone zz1(x1,x2,y,sp,type);
zombiezones.insert_last(zz1);
}
void destroy_all_zombiezones()
{
zombiezones.resize(0);
}

safezone@[]safezones(0);
class safezone
{
bool cam_in_zone;
bool player_in_zone;
int safesound;
double minx, maxx, miny, maxy;
string safetype;
safezone(double mx,double mx2,double my,double my2,string sft)
{
minx=mx;
maxx=mx2;
miny=my;
maxy=my2;
safetype=sft;
player_in_zone = (minx <= me.x && maxx >= me.x && miny <= me.y && maxy >= me.y);
cam_in_zone=true;
if (player_in_zone)
{
safesound=safepool.play_stationary(find_sound("sounds/"+soundpack+"/objects/safe zones/"+safetype+"/*in*"),false);
}
}
}
bool is_in_safe(double x,double y)
{
for(uint i=0; i<safezones.length(); i++)
{
if(safezones[i].minx<=x && safezones[i].maxx>=x && safezones[i].miny<=y && safezones[i].maxy>=y)
{
return true;
}
}
return false;
}
void spawn_safezone(double x1,double x2,double y1,double y2,string safetype)
{
safezone sz1(x1,x2,y1,y2,safetype);
safezones.insert_last(sz1);
}
void destroy_all_safezones()
{
for(uint i=0; i<safezones.length(); i++)
{
if(safezones[i].player_in_zone==true) safezones[i].safesound=safepool.play_stationary(find_sound("sounds/"+soundpack+"/objects/safe zones/"+safezones[i].safetype+"/*out*"),false);
}
safezones.resize(0);
}

zone@[]zones(0);
class zone
{
double minx, maxx, miny, maxy;
string text;
zone(double mx,double mx2,double my,double my2,string txt)
{
minx=mx;
maxx=mx2;
miny=my;
maxy=my2;
text=txt;
}
}
string get_zone_at(double x,double y)
{
string zdata;
for(uint i=0; i<zones.length(); i++)
{
if(zones[i].minx<=x and zones[i].maxx>=x and zones[i].miny<=y and zones[i].maxy>=y)
{
zdata=zones[i].text;
}
}
if(zdata!="") return zdata;
else return "";
}
string gmz()
{
return get_zone_at(me.x,me.y);
}
void checkloc()
{
if (get_zone_at(me.x, me.y)!="")
{
string locate=get_zone_at(me.x, me.y);
if (locate!=newzone)
{
if (zonestatus==1)
speak(locate);
newzone=locate;
}
}
else
{
if (newzone!="")
{
if (zonestatus==1) speak("leving "+newzone);
newzone="";
}
}
}
void spawn_zone(double x1,double x2,double y1,double y2,string text)
{
zone zone1(x1,x2,y1,y2,text);
zones.insert_last(zone1);
}
void destroy_all_zones()
{
zones.resize(0);
}
